/**
 * Test Direct de l'API FMP
 * V√©rifie si la cl√© API FMP est accessible et fonctionnelle
 */

const testFmpDirect = async () => {
  console.log('üîë TEST DIRECT DE L\'API FMP');
  console.log('============================');
  console.log('');

  // Test 1: V√©rifier si la variable d'environnement est accessible
  console.log('üìã √âTAPE 1: V√©rification de la Variable d\'Environnement');
  console.log('-------------------------------------------------------');
  
  const FMP_API_KEY = process.env.FMP_API_KEY;
  console.log('FMP_API_KEY:', FMP_API_KEY ? '‚úÖ Configur√©e' : '‚ùå Manquante');
  
  if (FMP_API_KEY) {
    console.log('Longueur de la cl√©:', FMP_API_KEY.length);
    console.log('D√©but de la cl√©:', FMP_API_KEY.substring(0, 8) + '...');
  }
  console.log('');

  // Test 2: Test direct avec l'API FMP
  console.log('üîå √âTAPE 2: Test Direct avec l\'API FMP');
  console.log('---------------------------------------');
  
  if (!FMP_API_KEY) {
    console.log('‚ùå Impossible de tester - cl√© API manquante');
    return;
  }

  try {
    // Test avec l'endpoint de base de FMP
    const testUrl = `https://financialmodelingprep.com/api/v3/quote/AAPL?apikey=${FMP_API_KEY}`;
    console.log('URL de test:', testUrl.replace(FMP_API_KEY, '***'));
    
    const response = await fetch(testUrl);
    const data = await response.json();
    
    console.log('Status HTTP:', response.status);
    console.log('Headers:', Object.fromEntries(response.headers.entries()));
    
    if (response.ok) {
      console.log('‚úÖ API FMP fonctionnelle !');
      console.log('Donn√©es re√ßues:', data.length > 0 ? `${data.length} √©l√©ments` : 'Aucune donn√©e');
      if (data.length > 0) {
        console.log('Exemple de donn√©es:', JSON.stringify(data[0], null, 2));
      }
    } else {
      console.log('‚ùå Erreur API FMP:', response.status);
      console.log('R√©ponse:', JSON.stringify(data, null, 2));
      
      if (response.status === 403) {
        console.log('');
        console.log('üö® ERREUR 403 - CAUSES POSSIBLES:');
        console.log('1. Cl√© API incorrecte');
        console.log('2. Compte FMP inactif ou suspendu');
        console.log('3. Limite de requ√™tes d√©pass√©e');
        console.log('4. Plan gratuit √©puis√©');
        console.log('');
        console.log('üîß SOLUTIONS:');
        console.log('1. V√©rifier la cl√© sur https://financialmodelingprep.com');
        console.log('2. V√©rifier le statut du compte');
        console.log('3. Consid√©rer un plan payant si n√©cessaire');
      }
    }
  } catch (error) {
    console.log('‚ùå Erreur lors du test:', error.message);
  }
  
  console.log('');
  
  // Test 3: Test avec un autre endpoint
  console.log('üîå √âTAPE 3: Test avec Endpoint Alternatif');
  console.log('------------------------------------------');
  
  try {
    const testUrl2 = `https://financialmodelingprep.com/api/v3/profile/AAPL?apikey=${FMP_API_KEY}`;
    console.log('URL de test 2:', testUrl2.replace(FMP_API_KEY, '***'));
    
    const response2 = await fetch(testUrl2);
    const data2 = await response2.json();
    
    console.log('Status HTTP:', response2.status);
    
    if (response2.ok) {
      console.log('‚úÖ Endpoint alternatif fonctionnel !');
      console.log('Donn√©es re√ßues:', data2.length > 0 ? `${data2.length} √©l√©ments` : 'Aucune donn√©e');
    } else {
      console.log('‚ùå Endpoint alternatif √©chou√©:', response2.status);
      console.log('R√©ponse:', JSON.stringify(data2, null, 2));
    }
  } catch (error) {
    console.log('‚ùå Erreur lors du test alternatif:', error.message);
  }
  
  console.log('');
  console.log('üéØ R√âSUM√â:');
  console.log('==========');
  console.log('Si les tests directs √©chouent avec 403:');
  console.log('- La cl√© API FMP est incorrecte ou expir√©e');
  console.log('- Le compte FMP a des limitations');
  console.log('- Il faut configurer une nouvelle cl√© API');
  console.log('');
  console.log('Si les tests directs r√©ussissent:');
  console.log('- Le probl√®me vient de la configuration Vercel');
  console.log('- Il faut red√©ployer ou v√©rifier les variables d\'environnement');
};

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  testFmpDirect().catch(console.error);
}

export { testFmpDirect };
