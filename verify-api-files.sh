#!/bin/bash

# Script de v√©rification des fichiers API
echo "üß™ V√©rification des fichiers API"
echo "================================"
echo ""

echo "üìã V√©rification des fichiers:"
echo ""

# V√©rifier que les fichiers existent
api_files=(
    "api/gemini/chat.js"
    "api/news/cached.js"
    "api/cron/refresh-news.js"
    "vercel.json"
)

for file in "${api_files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file existe"
        
        # V√©rifier la taille du fichier
        size=$(wc -c < "$file")
        echo "   Taille: $size bytes"
        
        # V√©rifier les imports/exports
        if grep -q "export default" "$file" 2>/dev/null; then
            echo "   ‚úÖ Export ES6 trouv√©"
        elif grep -q "module.exports" "$file" 2>/dev/null; then
            echo "   ‚úÖ Export CommonJS trouv√©"
        else
            echo "   ‚ö†Ô∏è Pas d'export trouv√©"
        fi
        
    else
        echo "‚ùå $file manquant"
    fi
done

echo ""
echo "üìä V√©rification vercel.json:"
echo ""

if [ -f "vercel.json" ]; then
    echo "‚úÖ vercel.json existe"
    
    # Compter les fonctions
    function_count=$(grep -c "maxDuration" vercel.json)
    echo "   Fonctions configur√©es: $function_count"
    
    # V√©rifier les nouvelles fonctions
    if grep -q "api/news/cached.js" vercel.json; then
        echo "   ‚úÖ api/news/cached.js configur√©e"
    else
        echo "   ‚ùå api/news/cached.js non configur√©e"
    fi
    
    if grep -q "api/cron/refresh-news.js" vercel.json; then
        echo "   ‚úÖ api/cron/refresh-news.js configur√©e"
    else
        echo "   ‚ùå api/cron/refresh-news.js non configur√©e"
    fi
    
    # V√©rifier les crons
    cron_count=$(grep -c "schedule" vercel.json)
    echo "   Crons configur√©s: $cron_count"
    
else
    echo "‚ùå vercel.json manquant"
fi

echo ""
echo "üîç V√©rification des imports dans les APIs:"
echo ""

# V√©rifier les imports dans api/news/cached.js
if [ -f "api/news/cached.js" ]; then
    if grep -q "import.*createClient" api/news/cached.js; then
        echo "‚úÖ api/news/cached.js: Import Supabase OK"
    else
        echo "‚ùå api/news/cached.js: Import Supabase manquant"
    fi
fi

# V√©rifier les imports dans api/cron/refresh-news.js
if [ -f "api/cron/refresh-news.js" ]; then
    if grep -q "import.*createClient" api/cron/refresh-news.js; then
        echo "‚úÖ api/cron/refresh-news.js: Import Supabase OK"
    else
        echo "‚ùå api/cron/refresh-news.js: Import Supabase manquant"
    fi
    
    if grep -q "CRON_SECRET" api/cron/refresh-news.js; then
        echo "‚úÖ api/cron/refresh-news.js: CRON_SECRET configur√©"
    else
        echo "‚ùå api/cron/refresh-news.js: CRON_SECRET manquant"
    fi
fi

echo ""
echo "üìã V√©rification des permissions:"
echo ""

# V√©rifier les permissions des fichiers
for file in "${api_files[@]}"; do
    if [ -f "$file" ]; then
        perms=$(ls -l "$file" | cut -d' ' -f1)
        echo "   $file: $perms"
    fi
done

echo ""
echo "üí° Recommandations:"
echo "=================="
echo "1. V√©rifier les logs Vercel Dashboard"
echo "2. Essayer de red√©ployer manuellement"
echo "3. V√©rifier que toutes les variables d'environnement sont configur√©es"
echo "4. Tester avec un endpoint simple d'abord"
echo ""
echo "üîß Prochaines √©tapes:"
echo "===================="
echo "1. Aller sur Vercel Dashboard"
echo "2. V√©rifier les logs de d√©ploiement"
echo "3. Essayer de red√©ployer manuellement"
echo "4. V√©rifier les variables d'environnement"
