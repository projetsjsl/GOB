// Test local des APIs pour diagnostiquer le probl√®me
const fs = require('fs');
const path = require('path');

console.log('üß™ Test local des APIs');
console.log('=====================');
console.log('');

// V√©rifier que les fichiers existent
const apiFiles = [
    'api/gemini/chat.js',
    'api/news/cached.js',
    'api/cron/refresh-news.js',
    'vercel.json'
];

console.log('üìã V√©rification des fichiers:');
apiFiles.forEach(file => {
    if (fs.existsSync(file)) {
        console.log(`‚úÖ ${file} existe`);
        
        // V√©rifier la syntaxe basique
        try {
            const content = fs.readFileSync(file, 'utf8');
            if (file.endsWith('.js')) {
                // V√©rifier que c'est un module ES6 valide
                if (content.includes('export default') || content.includes('module.exports')) {
                    console.log(`   ‚úÖ Syntaxe module OK`);
                } else {
                    console.log(`   ‚ö†Ô∏è Pas de export trouv√©`);
                }
            }
        } catch (error) {
            console.log(`   ‚ùå Erreur lecture: ${error.message}`);
        }
    } else {
        console.log(`‚ùå ${file} manquant`);
    }
});

console.log('');
console.log('üìä V√©rification vercel.json:');
try {
    const vercelConfig = JSON.parse(fs.readFileSync('vercel.json', 'utf8'));
    console.log('‚úÖ vercel.json valide');
    console.log(`   Fonctions configur√©es: ${Object.keys(vercelConfig.functions || {}).length}`);
    console.log(`   Crons configur√©s: ${(vercelConfig.crons || []).length}`);
    
    // V√©rifier les nouvelles fonctions
    const functions = vercelConfig.functions || {};
    if (functions['api/news/cached.js']) {
        console.log('   ‚úÖ api/news/cached.js configur√©e');
    } else {
        console.log('   ‚ùå api/news/cached.js non configur√©e');
    }
    
    if (functions['api/cron/refresh-news.js']) {
        console.log('   ‚úÖ api/cron/refresh-news.js configur√©e');
    } else {
        console.log('   ‚ùå api/cron/refresh-news.js non configur√©e');
    }
    
} catch (error) {
    console.log(`‚ùå Erreur vercel.json: ${error.message}`);
}

console.log('');
console.log('üîç V√©rification des imports dans les APIs:');

// V√©rifier les imports dans api/news/cached.js
try {
    const cachedContent = fs.readFileSync('api/news/cached.js', 'utf8');
    if (cachedContent.includes("import { createClient }")) {
        console.log('‚úÖ api/news/cached.js: Import Supabase OK');
    } else {
        console.log('‚ùå api/news/cached.js: Import Supabase manquant');
    }
} catch (error) {
    console.log(`‚ùå Erreur lecture api/news/cached.js: ${error.message}`);
}

// V√©rifier les imports dans api/cron/refresh-news.js
try {
    const cronContent = fs.readFileSync('api/cron/refresh-news.js', 'utf8');
    if (cronContent.includes("import { createClient }")) {
        console.log('‚úÖ api/cron/refresh-news.js: Import Supabase OK');
    } else {
        console.log('‚ùå api/cron/refresh-news.js: Import Supabase manquant');
    }
    
    if (cronContent.includes('process.env.CRON_SECRET')) {
        console.log('‚úÖ api/cron/refresh-news.js: CRON_SECRET configur√©');
    } else {
        console.log('‚ùå api/cron/refresh-news.js: CRON_SECRET manquant');
    }
} catch (error) {
    console.log(`‚ùå Erreur lecture api/cron/refresh-news.js: ${error.message}`);
}

console.log('');
console.log('üí° Recommandations:');
console.log('==================');
console.log('1. V√©rifier les logs Vercel Dashboard');
console.log('2. Essayer de red√©ployer manuellement');
console.log('3. V√©rifier que toutes les variables d\'environnement sont configur√©es');
console.log('4. Tester avec un endpoint simple d\'abord');
