/**
 * Test de l'√âtat Actuel du Dashboard
 * Valide ce qui fonctionne et ce qui ne fonctionne pas
 */

const testDashboardEtatActuel = async () => {
  console.log('üîç TEST DE L\'√âTAT ACTUEL DU DASHBOARD');
  console.log('======================================');
  console.log('');

  const etat = {
    site: false,
    onglets: [],
    apis: [],
    fonctionnalites: []
  };

  // 1. Test du site
  console.log('üåê √âTAPE 1: V√©rification du Site');
  console.log('--------------------------------');
  
  try {
    const response = await fetch('https://gobapps.com/beta-combined-dashboard.html');
    if (response.ok) {
      const html = await response.text();
      etat.site = true;
      console.log('‚úÖ Site accessible');
      
      // V√©rifier les onglets
      if (html.includes('JLab‚Ñ¢')) {
        etat.onglets.push('JLab‚Ñ¢');
        console.log('‚úÖ Onglet JLab‚Ñ¢ pr√©sent');
      }
      if (html.includes('Seeking Alpha')) {
        etat.onglets.push('Seeking Alpha');
        console.log('‚úÖ Onglet Seeking Alpha pr√©sent');
      }
      if (html.includes('Perplexity')) {
        etat.onglets.push('Perplexity');
        console.log('‚úÖ Onglet Perplexity pr√©sent');
      }
    } else {
      console.log(`‚ùå Site inaccessible: ${response.status}`);
    }
  } catch (error) {
    console.log(`‚ùå Erreur site: ${error.message}`);
  }
  console.log('');

  // 2. Test des APIs fonctionnelles
  console.log('üîå √âTAPE 2: Test des APIs Fonctionnelles');
  console.log('----------------------------------------');
  
  // Test Marketaux
  try {
    const response = await fetch('https://gobapps.com/api/unified-serverless?endpoint=marketaux&symbol=AAPL&limit=1');
    const data = await response.json();
    
    if (response.ok) {
      etat.apis.push('Marketaux');
      console.log('‚úÖ API Marketaux fonctionnelle');
      console.log(`   Donn√©es: ${data.news ? data.news.length : 0} actualit√©s`);
    } else {
      console.log('‚ùå API Marketaux √©chou√©e');
    }
  } catch (error) {
    console.log('‚ùå Erreur API Marketaux:', error.message);
  }

  // Test Gemini
  try {
    const response = await fetch('https://gobapps.com/api/unified-serverless?endpoint=gemini-chat');
    if (response.ok) {
      etat.apis.push('Gemini');
      console.log('‚úÖ API Gemini accessible');
    } else {
      console.log('‚ùå API Gemini √©chou√©e');
    }
  } catch (error) {
    console.log('‚ùå Erreur API Gemini:', error.message);
  }
  console.log('');

  // 3. Test des APIs probl√©matiques
  console.log('üö® √âTAPE 3: Test des APIs Probl√©matiques');
  console.log('----------------------------------------');
  
  const apisProblematiques = [
    { name: 'FMP', endpoint: 'fmp', params: 'symbol=AAPL&action=quote' },
    { name: 'Market Data', endpoint: 'marketdata', params: 'symbol=AAPL&source=yahoo' },
    { name: 'Hybrid Data', endpoint: 'hybrid-data', params: 'symbol=AAPL&dataType=quote&syncIfNeeded=true' }
  ];

  for (const api of apisProblematiques) {
    try {
      const response = await fetch(`https://gobapps.com/api/unified-serverless?endpoint=${api.endpoint}&${api.params}`);
      const data = await response.json();
      
      if (response.ok && !data.error) {
        console.log(`‚úÖ ${api.name}: Fonctionnelle`);
        etat.apis.push(api.name);
      } else {
        console.log(`‚ùå ${api.name}: ${data.error || 'Erreur inconnue'}`);
      }
    } catch (error) {
      console.log(`‚ùå ${api.name}: ${error.message}`);
    }
  }
  console.log('');

  // 4. Test des fonctionnalit√©s du dashboard
  console.log('üéØ √âTAPE 4: Test des Fonctionnalit√©s');
  console.log('------------------------------------');
  
  // Test de l'onglet JLab
  if (etat.onglets.includes('JLab‚Ñ¢')) {
    console.log('‚úÖ Onglet JLab‚Ñ¢ disponible');
    etat.fonctionnalites.push('Onglet JLab‚Ñ¢');
    
    // Test des donn√©es JLab
    try {
      const response = await fetch('https://gobapps.com/api/unified-serverless?endpoint=hybrid-data&symbol=AAPL&dataType=quote&syncIfNeeded=true');
      const data = await response.json();
      
      if (response.ok && data.success && data.data) {
        console.log('‚úÖ Donn√©es JLab disponibles');
        etat.fonctionnalites.push('Donn√©es JLab');
      } else {
        console.log('‚ùå Donn√©es JLab non disponibles');
      }
    } catch (error) {
      console.log('‚ùå Erreur donn√©es JLab:', error.message);
    }
  }

  // Test des graphiques
  try {
    const response = await fetch('https://gobapps.com/api/unified-serverless?endpoint=hybrid-data&symbol=AAPL&dataType=prices&syncIfNeeded=true');
    const data = await response.json();
    
    if (response.ok && data.success && data.data) {
      console.log('‚úÖ Donn√©es graphiques disponibles');
      etat.fonctionnalites.push('Graphiques');
    } else {
      console.log('‚ùå Donn√©es graphiques non disponibles');
    }
  } catch (error) {
    console.log('‚ùå Erreur graphiques:', error.message);
  }
  console.log('');

  // 5. R√©sum√© de l'√©tat actuel
  console.log('üìä R√âSUM√â DE L\'√âTAT ACTUEL');
  console.log('============================');
  console.log(`üåê Site: ${etat.site ? '‚úÖ Accessible' : '‚ùå Inaccessible'}`);
  console.log(`üìë Onglets: ${etat.onglets.length > 0 ? '‚úÖ' : '‚ùå'} ${etat.onglets.join(', ')}`);
  console.log(`üîå APIs: ${etat.apis.length > 0 ? '‚úÖ' : '‚ùå'} ${etat.apis.join(', ')}`);
  console.log(`üéØ Fonctionnalit√©s: ${etat.fonctionnalites.length > 0 ? '‚úÖ' : '‚ùå'} ${etat.fonctionnalites.join(', ')}`);
  console.log('');

  // 6. √âtat de fonctionnement
  if (etat.site && etat.onglets.length > 0) {
    console.log('üéâ DASHBOARD PARTIELLEMENT FONCTIONNEL');
    console.log('=====================================');
    console.log('‚úÖ Le site est accessible');
    console.log('‚úÖ Les onglets sont pr√©sents');
    console.log('‚úÖ Certaines APIs fonctionnent');
    console.log('');
    console.log('üåê URL: https://gobapps.com/beta-combined-dashboard.html');
    console.log('üìã Vous pouvez tester manuellement:');
    console.log('   1. Ouvrir le site');
    console.log('   2. Cliquer sur l\'onglet JLab‚Ñ¢');
    console.log('   3. V√©rifier l\'affichage des donn√©es');
    console.log('');
    console.log('üö® PROBL√àMES IDENTIFI√âS:');
    console.log('   - APIs FMP non fonctionnelles (403 Forbidden)');
    console.log('   - Supabase non configur√©');
    console.log('   - Donn√©es financi√®res manquantes');
  } else {
    console.log('üö® DASHBOARD NON FONCTIONNEL');
    console.log('============================');
    console.log('‚ùå Probl√®mes critiques d√©tect√©s');
    console.log('üìñ Suivre le guide: ACTION-IMMEDIATE-VALIDATION.md');
  }

  return etat;
};

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  testDashboardEtatActuel().catch(console.error);
}

export { testDashboardEtatActuel };
