/**
 * Emma Agent - Syst√®me de Function Calling Intelligent
 * Agent principal pour Emma avec scoring automatique et s√©lection d'outils
 */

import fs from 'fs';
import path from 'path';

class SmartAgent {
    constructor() {
        this.toolsConfig = this._loadToolsConfig();
        this.usageStats = this._loadUsageStats();
        this.conversationHistory = [];
    }

    /**
     * Point d'entr√©e principal pour Emma
     */
    async processRequest(userMessage, context = {}) {
        try {
            console.log('ü§ñ Emma Agent: Processing request:', userMessage.substring(0, 100) + '...');
            
            // 1. Planification avec scoring
            const selectedTools = await this._plan_with_scoring(userMessage, context);
            console.log('üìã Selected tools:', selectedTools.map(t => t.id));

            // 2. Ex√©cution des outils
            const toolResults = await this._execute_all(selectedTools, userMessage, context);
            console.log('‚ö° Tool execution completed');

            // 3. G√©n√©ration de la r√©ponse finale
            const finalResponse = await this._generate_response(userMessage, toolResults, context);
            console.log('‚ú® Final response generated');

            // 4. Mise √† jour de l'historique
            this._updateConversationHistory(userMessage, finalResponse, toolResults);

            // 5. Sauvegarde des statistiques
            this._saveUsageStats();

            return {
                success: true,
                response: finalResponse,
                tools_used: selectedTools.map(t => t.id),
                execution_time_ms: Date.now() - (context.start_time || Date.now()),
                conversation_length: this.conversationHistory.length,
                is_reliable: toolResults.every(r => r.is_reliable)
            };

        } catch (error) {
            console.error('‚ùå Emma Agent Error:', error);
            return {
                success: false,
                error: error.message,
                response: "D√©sol√©, j'ai rencontr√© une erreur technique. Veuillez r√©essayer.",
                is_reliable: false
            };
        }
    }

    /**
     * S√©lection intelligente des outils bas√©e sur scoring
     */
    async _plan_with_scoring(userMessage, context) {
        const message = userMessage.toLowerCase();
        const availableTools = this.toolsConfig.tools.filter(tool => tool.enabled);
        
        // Scoring des outils
        const scoredTools = availableTools.map(tool => {
            let score = 0;
            
            // Score de base (priorit√© invers√©e - plus bas = mieux)
            score += (tool.priority * 10);
            
            // Score de pertinence contextuelle
            const relevanceScore = this._calculateRelevanceScore(tool, message, context);
            score -= relevanceScore;
            
            // Score de performance historique
            const performanceScore = this._calculatePerformanceScore(tool.id);
            score -= performanceScore;
            
            // Bonus pour outils r√©cemment utilis√©s avec succ√®s
            const recencyBonus = this._calculateRecencyBonus(tool.id);
            score -= recencyBonus;
            
            return {
                ...tool,
                calculated_score: score,
                relevance_score: relevanceScore,
                performance_score: performanceScore,
                recency_bonus: recencyBonus
            };
        });

        // Tri par score (plus bas = mieux)
        scoredTools.sort((a, b) => a.calculated_score - b.calculated_score);

        // S√©lection des meilleurs outils (max 5 simultan√©s)
        const maxTools = Math.min(this.toolsConfig.config.max_concurrent_tools, scoredTools.length);
        const selectedTools = scoredTools.slice(0, maxTools);

        console.log('üéØ Tool scoring results:', selectedTools.map(t => ({
            id: t.id,
            score: t.calculated_score,
            relevance: t.relevance_score,
            performance: t.performance_score
        })));

        return selectedTools;
    }

    /**
     * Calcul du score de pertinence contextuelle
     */
    _calculateRelevanceScore(tool, message, context) {
        let score = 0;
        
        // Mots-cl√©s dans le message
        tool.keywords.forEach(keyword => {
            if (message.includes(keyword.toLowerCase())) {
                score += 20;
            }
        });
        
        // Contexte d'utilisation
        tool.usage_context.forEach(context_word => {
            if (message.includes(context_word.toLowerCase())) {
                score += 15;
            }
        });
        
        // Contexte sp√©cifique (tickers, etc.)
        if (context.tickers && tool.id.includes('ticker')) {
            score += 25;
        }
        
        if (context.news_requested && tool.category === 'news') {
            score += 30;
        }
        
        if (context.calculation_needed && tool.category === 'calculation') {
            score += 35;
        }
        
        return score;
    }

    /**
     * Calcul du score de performance historique
     */
    _calculatePerformanceScore(toolId) {
        const stats = this.usageStats[toolId];
        if (!stats || stats.total_calls === 0) {
            return 10; // Score neutre pour nouveaux outils
        }
        
        // Score bas√© sur le taux de succ√®s
        const successRate = stats.success_rate;
        return Math.round(successRate * 30); // Max 30 points
    }

    /**
     * Bonus pour utilisation r√©cente
     */
    _calculateRecencyBonus(toolId) {
        const stats = this.usageStats[toolId];
        if (!stats || !stats.last_used) {
            return 0;
        }
        
        const hoursSinceLastUse = (Date.now() - new Date(stats.last_used).getTime()) / (1000 * 60 * 60);
        
        // Bonus d√©croissant sur 24h
        if (hoursSinceLastUse < 1) return 15;
        if (hoursSinceLastUse < 6) return 10;
        if (hoursSinceLastUse < 24) return 5;
        return 0;
    }

    /**
     * Ex√©cution parall√®le des outils s√©lectionn√©s
     */
    async _execute_all(selectedTools, userMessage, context) {
        const executionPromises = selectedTools.map(async (tool) => {
            const startTime = Date.now();
            
            try {
                console.log(`üîß Executing tool: ${tool.id}`);
                
                // Import dynamique de l'outil
                const toolModule = await import(`../lib/tools/${tool.implementation.file}`);
                const toolInstance = new toolModule.default();
                
                // Pr√©paration des param√®tres
                const params = this._prepareToolParameters(tool, userMessage, context);
                
                // Ex√©cution avec timeout
                const result = await Promise.race([
                    toolInstance.execute(params, context),
                    new Promise((_, reject) => 
                        setTimeout(() => reject(new Error('Tool timeout')), this.toolsConfig.config.timeout_ms)
                    )
                ]);
                
                const executionTime = Date.now() - startTime;
                
                // Mise √† jour des statistiques
                this._updateToolStats(tool.id, true, executionTime);
                
                return {
                    tool_id: tool.id,
                    success: true,
                    data: result,
                    execution_time_ms: executionTime,
                    is_reliable: result && result.is_reliable !== false
                };
                
            } catch (error) {
                const executionTime = Date.now() - startTime;
                console.error(`‚ùå Tool ${tool.id} failed:`, error.message);
                
                // Mise √† jour des statistiques d'erreur
                this._updateToolStats(tool.id, false, executionTime, error.message);
                
                // Tentative de fallback
                const fallbackResult = await this._tryFallback(tool, userMessage, context);
                
                return {
                    tool_id: tool.id,
                    success: false,
                    error: error.message,
                    fallback_used: fallbackResult ? fallbackResult.tool_id : null,
                    data: fallbackResult ? fallbackResult.data : null,
                    execution_time_ms: executionTime,
                    is_reliable: fallbackResult ? fallbackResult.is_reliable : false
                };
            }
        });
        
        const results = await Promise.allSettled(executionPromises);
        return results.map(r => r.status === 'fulfilled' ? r.value : {
            success: false,
            error: r.reason?.message || 'Unknown error',
            is_reliable: false
        });
    }

    /**
     * Tentative de fallback en cas d'√©chec d'outil
     */
    async _tryFallback(failedTool, userMessage, context) {
        if (!failedTool.fallback_tools || failedTool.fallback_tools.length === 0) {
            return null;
        }
        
        for (const fallbackId of failedTool.fallback_tools) {
            try {
                const fallbackTool = this.toolsConfig.tools.find(t => t.id === fallbackId);
                if (!fallbackTool || !fallbackTool.enabled) continue;
                
                console.log(`üîÑ Trying fallback: ${fallbackId}`);
                
                const toolModule = await import(`../lib/tools/${fallbackTool.implementation.file}`);
                const toolInstance = new toolModule.default();
                const params = this._prepareToolParameters(fallbackTool, userMessage, context);
                
                const result = await toolInstance.execute(params, context);
                this._updateToolStats(fallbackId, true, 0);
                
                return {
                    tool_id: fallbackId,
                    data: result,
                    is_reliable: result && result.is_reliable !== false
                };
                
            } catch (error) {
                console.error(`‚ùå Fallback ${fallbackId} also failed:`, error.message);
                continue;
            }
        }
        
        return null;
    }

    /**
     * Pr√©paration des param√®tres pour l'outil
     */
    _prepareToolParameters(tool, userMessage, context) {
        const params = {};
        
        // Extraction des param√®tres depuis le message et le contexte
        if (tool.parameters.ticker && context.tickers) {
            params.ticker = context.tickers[0]; // Premier ticker par d√©faut
        }
        
        if (tool.parameters.operation && userMessage.toLowerCase().includes('calcul')) {
            params.operation = 'pe_ratio'; // Par d√©faut
        }
        
        if (tool.parameters.date) {
            params.date = new Date().toISOString().split('T')[0];
        }
        
        return params;
    }

    /**
     * G√©n√©ration de la r√©ponse finale avec Perplexity
     */
    async _generate_response(userMessage, toolResults, context) {
        try {
            // Pr√©paration du contexte pour Perplexity
            const toolsData = toolResults
                .filter(r => r.success && r.data)
                .map(r => ({
                    tool: r.tool_id,
                    data: r.data
                }));
            
            const conversationContext = this.conversationHistory.slice(-5); // 5 derniers √©changes
            
            const perplexityPrompt = this._buildPerplexityPrompt(
                userMessage, 
                toolsData, 
                conversationContext, 
                context
            );
            
            // Appel √† Perplexity
            const perplexityResponse = await this._call_perplexity(perplexityPrompt);
            
            return perplexityResponse;
            
        } catch (error) {
            console.error('‚ùå Response generation failed:', error);
            
            // R√©ponse de fallback bas√©e sur les donn√©es des outils
            return this._generateFallbackResponse(userMessage, toolResults);
        }
    }

    /**
     * Construction du prompt pour Perplexity
     */
    _buildPerplexityPrompt(userMessage, toolsData, conversationContext, context) {
        let prompt = `Tu es Emma, l'assistante financi√®re intelligente. R√©ponds en fran√ßais de mani√®re professionnelle et accessible.

CONTEXTE DE LA CONVERSATION:
${conversationContext.map(c => `- ${c.role}: ${c.content}`).join('\n')}

DONN√âES DISPONIBLES DES OUTILS:
${toolsData.map(t => `- ${t.tool}: ${JSON.stringify(t.data, null, 2)}`).join('\n')}

QUESTION DE L'UTILISATEUR: ${userMessage}

INSTRUCTIONS:
1. Utilise UNIQUEMENT les donn√©es fournies par les outils (pas de donn√©es fictives)
2. Si les donn√©es sont insuffisantes, indique-le clairement
3. Sois pr√©cis et cite tes sources (outils utilis√©s)
4. Adapte ton ton selon le contexte (professionnel mais accessible)
5. Si c'est une question technique, sois d√©taill√©
6. Si c'est une question g√©n√©rale, sois concis

R√âPONSE:`;

        return prompt;
    }

    /**
     * Appel √† l'API Perplexity
     */
    async _call_perplexity(prompt) {
        try {
            const response = await fetch('https://api.perplexity.ai/chat/completions', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${process.env.PERPLEXITY_API_KEY}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    model: 'llama-3.1-sonar-small-128k-online',
                    messages: [
                        {
                            role: 'system',
                            content: 'Tu es Emma, une assistante financi√®re experte. R√©ponds toujours en fran√ßais de mani√®re professionnelle et accessible.'
                        },
                        {
                            role: 'user',
                            content: prompt
                        }
                    ],
                    max_tokens: 1000,
                    temperature: 0.7
                })
            });

            if (!response.ok) {
                throw new Error(`Perplexity API error: ${response.status}`);
            }

            const data = await response.json();
            return data.choices[0].message.content;

        } catch (error) {
            console.error('‚ùå Perplexity API error:', error);
            throw new Error('Erreur de communication avec Perplexity');
        }
    }

    /**
     * R√©ponse de fallback si Perplexity √©choue
     */
    _generateFallbackResponse(userMessage, toolResults) {
        const successfulResults = toolResults.filter(r => r.success && r.data);
        
        if (successfulResults.length === 0) {
            return "D√©sol√©, je n'ai pas pu r√©cup√©rer de donn√©es fiables pour r√©pondre √† votre question. Veuillez r√©essayer.";
        }
        
        let response = "Voici les informations que j'ai pu r√©cup√©rer :\n\n";
        
        successfulResults.forEach(result => {
            response += `**${result.tool_id}**: ${JSON.stringify(result.data, null, 2)}\n\n`;
        });
        
        response += "Note: Cette r√©ponse est bas√©e uniquement sur les donn√©es disponibles. Pour une analyse plus approfondie, veuillez reformuler votre question.";
        
        return response;
    }

    /**
     * Mise √† jour de l'historique de conversation
     */
    _updateConversationHistory(userMessage, response, toolResults) {
        this.conversationHistory.push({
            role: 'user',
            content: userMessage,
            timestamp: new Date().toISOString()
        });
        
        this.conversationHistory.push({
            role: 'assistant',
            content: response,
            tools_used: toolResults.map(r => r.tool_id),
            timestamp: new Date().toISOString()
        });
        
        // Limiter l'historique √† 20 √©changes (10 questions/r√©ponses)
        if (this.conversationHistory.length > 20) {
            this.conversationHistory = this.conversationHistory.slice(-20);
        }
    }

    /**
     * Mise √† jour des statistiques d'outil
     */
    _updateToolStats(toolId, success, executionTime, errorMessage = null) {
        if (!this.usageStats[toolId]) {
            this.usageStats[toolId] = {
                total_calls: 0,
                successful_calls: 0,
                failed_calls: 0,
                average_response_time_ms: 0,
                last_used: null,
                success_rate: 0,
                error_history: []
            };
        }
        
        const stats = this.usageStats[toolId];
        stats.total_calls++;
        stats.last_used = new Date().toISOString();
        
        if (success) {
            stats.successful_calls++;
        } else {
            stats.failed_calls++;
            if (errorMessage) {
                stats.error_history.push({
                    timestamp: new Date().toISOString(),
                    error: errorMessage
                });
                // Garder seulement les 10 derni√®res erreurs
                if (stats.error_history.length > 10) {
                    stats.error_history = stats.error_history.slice(-10);
                }
            }
        }
        
        // Calcul du taux de succ√®s
        stats.success_rate = stats.total_calls > 0 ? (stats.successful_calls / stats.total_calls) * 100 : 0;
        
        // Mise √† jour du temps de r√©ponse moyen
        if (executionTime > 0) {
            const totalTime = stats.average_response_time_ms * (stats.total_calls - 1) + executionTime;
            stats.average_response_time_ms = Math.round(totalTime / stats.total_calls);
        }
    }

    /**
     * Chargement de la configuration des outils
     */
    _loadToolsConfig() {
        try {
            const configPath = path.join(process.cwd(), 'config', 'tools_config.json');
            return JSON.parse(fs.readFileSync(configPath, 'utf8'));
        } catch (error) {
            console.error('‚ùå Failed to load tools config:', error);
            return { tools: [], config: {} };
        }
    }

    /**
     * Chargement des statistiques d'utilisation
     */
    _loadUsageStats() {
        try {
            const statsPath = path.join(process.cwd(), 'config', 'usage_stats.json');
            return JSON.parse(fs.readFileSync(statsPath, 'utf8'));
        } catch (error) {
            console.error('‚ùå Failed to load usage stats:', error);
            return {};
        }
    }

    /**
     * Sauvegarde des statistiques d'utilisation
     */
    _saveUsageStats() {
        try {
            const statsPath = path.join(process.cwd(), 'config', 'usage_stats.json');
            fs.writeFileSync(statsPath, JSON.stringify(this.usageStats, null, 2));
        } catch (error) {
            console.error('‚ùå Failed to save usage stats:', error);
        }
    }
}

// Instance globale de l'agent
let emmaAgent = null;

/**
 * Handler principal pour l'API Emma Agent
 */
export default async function handler(req, res) {
    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }

    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }

    try {
        // Initialisation de l'agent si n√©cessaire
        if (!emmaAgent) {
            emmaAgent = new SmartAgent();
        }

        const { message, context = {} } = req.body;
        
        if (!message) {
            return res.status(400).json({ error: 'Message is required' });
        }

        // Ajout du timestamp de d√©but
        context.start_time = Date.now();

        // Traitement de la requ√™te
        const result = await emmaAgent.processRequest(message, context);

        return res.status(200).json(result);

    } catch (error) {
        console.error('‚ùå Emma Agent API Error:', error);
        return res.status(500).json({
            success: false,
            error: error.message,
            response: "Erreur interne du serveur. Veuillez r√©essayer."
        });
    }
}
