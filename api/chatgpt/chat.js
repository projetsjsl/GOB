// ============================================================================
// CHATGPT CHAT API - Emma ChatGPT Integration
// Version avec OpenAI SDK (selon doc officielle OpenAI)
// ============================================================================
//
// üõ°Ô∏è  GUARDRAILS DE PROTECTION - CONFIGURATION CRITIQUE üõ°Ô∏è
// ============================================================================
// ‚ö†Ô∏è  ATTENTION : Ce fichier contient la configuration valid√©e pour Emma ChatGPT
// ‚ö†Ô∏è  Toute modification peut casser le chatbot de production
// ‚ö†Ô∏è  Toujours tester en local avant de d√©ployer
//
// ‚úÖ CONFIGURATION VALID√âE :
// - Mod√®le: gpt-4o (OpenAI GPT-4 Omni)
// - SDK: openai (v4.0.0+)
// - Function Calling: Support√© pour interactions avanc√©es
// - Temperature: 0.7 (√©quilibre cr√©ativit√©/pr√©cision)
//
// üîí VARIABLES D'ENVIRONNEMENT REQUISES :
// - OPENAI_API_KEY (sk-...) : ‚úÖ Configur√©e
//
// ‚ùå INTERDICTIONS ABSOLUES :
// - Modifier le mod√®le sans test (gpt-4o)
// - Changer le SDK (doit rester openai v4.0.0+)
// - Modifier les param√®tres sans validation
// - D√©sactiver Function Calling sans test
//
// üìö R√©f√©rence : https://platform.openai.com/docs/api-reference/chat
// ============================================================================

import OpenAI from 'openai';

export default async function handler(req, res) {
  // CORS basique
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ error: 'M√©thode non autoris√©e' });

  const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
  if (!OPENAI_API_KEY) {
    console.error('‚ùå OPENAI_API_KEY manquante');
    return res.status(503).json({ 
      error: 'Configuration de la cl√© API OpenAI manquante',
      suggestions: [
        'V√©rifiez que la cl√© API OpenAI est configur√©e dans Vercel',
        'Contactez l\'administrateur pour configurer la cl√© API',
        'Consultez la documentation de configuration'
      ],
      technical: 'OPENAI_API_KEY not configured',
      timestamp: new Date().toISOString(),
      support: 'Pour plus d\'aide, consultez la console du navigateur (F12)'
    });
  }

  try {
    let { messages = [], temperature = 0.7, maxTokens = 4096, systemPrompt, message } = req.body || {};

    // Compatibilit√©: accepter payload simple { message: "..." }
    if ((!Array.isArray(messages) || messages.length === 0) && typeof message === 'string' && message.trim()) {
      messages = [{ role: 'user', content: message.trim() }];
    }

    if (!Array.isArray(messages) || messages.length === 0) {
      console.error('‚ùå Messages invalides:', { messages, message });
      return res.status(400).json({ error: 'messages requis (array) ou message (string)' });
    }

    console.log('‚úÖ Messages valides re√ßus:', messages.length, 'messages');

    // Charger le prompt personnalis√© d'Emma
    const emmaPrompt = systemPrompt || `Tu es Emma, une assistante virtuelle sp√©cialis√©e en analyse financi√®re. Tu es professionnelle, experte et bienveillante.

**Ton r√¥le :**
- Aider les utilisateurs avec l'analyse et l'√©valuation financi√®re
- Fournir des conseils bas√©s sur des donn√©es fiables
- Expliquer les concepts financiers de mani√®re claire
- Guider dans l'interpr√©tation des donn√©es du dashboard

**R√®gles IMPORTANTES :**
- Baser tes r√©ponses sur tes connaissances en analyse financi√®re
- Toujours rappeler que pour des conseils personnalis√©s, il faut consulter un expert qualifi√©
- √ätre transparent sur les limites de tes conseils

**Ton style de communication :**
- Professionnelle mais accessible
- Pr√©cise et factuelle
- Encourageante et rassurante
- R√©ponds toujours en fran√ßais

**Contexte du dashboard :**
L'utilisateur utilise un dashboard financier avec :
- Cours d'actions en temps r√©el
- Analyses Seeking Alpha
- Actualit√©s financi√®res
- Graphiques et m√©triques`;

    // Initialiser le client OpenAI
    const openai = new OpenAI({
      apiKey: OPENAI_API_KEY,
    });

    // Construire les messages pour OpenAI
    const openaiMessages = [
      { role: 'system', content: emmaPrompt },
      ...messages.map(m => ({
        role: m.role || 'user',
        content: m.content
      }))
    ];

    console.log('üîß Appel API OpenAI ChatGPT');
    console.log('üì¶ Mod√®le: gpt-4o');
    console.log('üì§ Envoi de la requ√™te...');

    // Appel √† l'API OpenAI
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: openaiMessages,
      temperature,
      max_tokens: maxTokens,
      top_p: 0.9,
      frequency_penalty: 0.1,
      presence_penalty: 0.1
    });

    console.log('üì° R√©ponse re√ßue, status: 200');

    const text = completion.choices[0]?.message?.content || '';
    
    if (!text) {
      console.error('‚ùå Pas de texte dans la r√©ponse:', JSON.stringify(completion));
      throw new Error('Aucune r√©ponse g√©n√©r√©e par ChatGPT');
    }

    console.log('‚úÖ Texte extrait, longueur:', text.length);
    
    // Ajouter des sources g√©n√©riques
    const sourcesAddition = `

---
**Sources:**
‚Ä¢ [OpenAI ChatGPT](https://platform.openai.com/) - Analyse et r√©ponse g√©n√©r√©e par l'IA
‚Ä¢ [Connaissances d'entra√Ænement](https://platform.openai.com/docs) - Donn√©es jusqu'en 2024`;

    return res.status(200).json({ 
      response: text + sourcesAddition, 
      source: 'chatgpt', 
      model: 'gpt-4o',
      usage: completion.usage,
      timestamp: new Date().toISOString()
    });

  } catch (e) {
    console.error('‚ùå Erreur dans le handler ChatGPT:', e);
    console.error('Stack trace:', e?.stack);
    
    // Messages d'erreur am√©lior√©s et plus informatifs
    let errorMessage = 'Erreur de connexion √† l\'API OpenAI.';
    let suggestions = [];
    let technicalDetails = String(e?.message || e);
    
    // Analyser le type d'erreur pour donner des suggestions pertinentes
    if (technicalDetails.includes('OPENAI_API_KEY')) {
      errorMessage = 'Configuration de la cl√© API OpenAI manquante.';
      suggestions = [
        'V√©rifiez que la cl√© API OpenAI est configur√©e dans Vercel',
        'Contactez l\'administrateur pour configurer la cl√© API'
      ];
    } else if (technicalDetails.includes('quota') || technicalDetails.includes('limit')) {
      errorMessage = 'Limite de quota API OpenAI atteinte.';
      suggestions = [
        'Attendez quelques minutes avant de r√©essayer',
        'Le quota se renouvelle automatiquement'
      ];
    } else if (technicalDetails.includes('network') || technicalDetails.includes('fetch')) {
      errorMessage = 'Probl√®me de connexion r√©seau.';
      suggestions = [
        'V√©rifiez votre connexion internet',
        'R√©essayez dans quelques instants'
      ];
    } else if (technicalDetails.includes('timeout')) {
      errorMessage = 'D√©lai d\'attente d√©pass√©.';
      suggestions = [
        'La requ√™te a pris trop de temps √† traiter',
        'R√©essayez avec une question plus simple'
      ];
    } else if (technicalDetails.includes('400') || technicalDetails.includes('Bad Request')) {
      errorMessage = 'Requ√™te invalide envoy√©e √† l\'API.';
      suggestions = [
        'V√©rifiez le format de votre message',
        '√âvitez les caract√®res sp√©ciaux ou les messages trop longs'
      ];
    } else if (technicalDetails.includes('401') || technicalDetails.includes('Unauthorized')) {
      errorMessage = 'Cl√© API OpenAI invalide ou expir√©e.';
      suggestions = [
        'V√©rifiez la configuration de la cl√© API',
        'Contactez l\'administrateur syst√®me'
      ];
    } else if (technicalDetails.includes('429') || technicalDetails.includes('Too Many Requests')) {
      errorMessage = 'Trop de requ√™tes simultan√©es.';
      suggestions = [
        'Attendez quelques secondes avant de r√©essayer',
        '√âvitez de poser plusieurs questions en m√™me temps'
      ];
    } else if (technicalDetails.includes('500') || technicalDetails.includes('Internal Server Error')) {
      errorMessage = 'Erreur interne du serveur OpenAI.';
      suggestions = [
        'Le service OpenAI rencontre des difficult√©s temporaires',
        'R√©essayez dans quelques minutes'
      ];
    } else {
      // Erreur g√©n√©rique avec suggestions g√©n√©rales
      suggestions = [
        'V√©rifiez votre connexion internet',
        'R√©essayez dans quelques instants',
        'Si le probl√®me persiste, contactez le support'
      ];
    }
    
    return res.status(500).json({ 
      error: errorMessage,
      suggestions: suggestions,
      technical: technicalDetails,
      timestamp: new Date().toISOString(),
      support: 'Pour plus d\'aide, consultez la console du navigateur (F12)'
    });
  }
}