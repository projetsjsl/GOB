// ============================================================================
// GEMINI CHAT VALIDATED - Emma En Direct Chatbot (Mode Expert)
// Version avec validation avanc√©e et gestion d'erreurs am√©lior√©e
// ============================================================================
//
// üõ°Ô∏è  GUARDRAILS DE PROTECTION - CONFIGURATION CRITIQUE üõ°Ô∏è
// ============================================================================
// ‚ö†Ô∏è  ATTENTION : Ce fichier contient la configuration valid√©e pour Emma Expert
// ‚ö†Ô∏è  Toute modification peut casser le chatbot de production
// ‚ö†Ô∏è  Toujours tester en local avant de d√©ployer
//
// ‚úÖ CONFIGURATION VALID√âE (Test√©e le 15/10/2025) :
// - Mod√®le: gemini-2.0-flash-exp (PAS gemini-1.5-flash)
// - SDK: @google/generative-ai (PAS @google/genai)
// - Validation: Messages, tokens, safety settings
// - Mode Expert: useValidatedMode = true par d√©faut
// - Temperature: 0.3 (plus conservateur pour mode expert)
// - Max tokens: 4000 (plus √©lev√© pour analyses d√©taill√©es)
//
// üîí VARIABLES D'ENVIRONNEMENT REQUISES :
// - GEMINI_API_KEY (AI...) : ‚úÖ Configur√©e
//
// ‚ùå INTERDICTIONS ABSOLUES :
// - Modifier le mod√®le sans test (gemini-2.0-flash-exp)
// - Changer le SDK (doit rester @google/generative-ai)
// - Modifier les param√®tres de validation sans test
// - Changer la temp√©rature sans test (0.3 pour mode expert)
// - Modifier les safety settings sans validation
//
// üîß D√âPANNAGE RAPIDE :
// - 400 = messages invalides ou manquants
// - 401 = cl√© API invalide/expir√©e
// - 429 = quota d√©pass√©, attendre ou upgrader
// - 500 = erreur serveur, v√©rifier logs
// ============================================================================

export default async function handler(req, res) {
  // CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©thode non autoris√©e' });
  }

  try {
    const { messages, useValidatedMode = true } = req.body;

    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      return res.status(400).json({ 
        error: 'Messages requis',
        details: 'Le param√®tre messages doit √™tre un tableau non vide'
      });
    }

    const geminiApiKey = process.env.GEMINI_API_KEY;
    
    if (!geminiApiKey) {
      console.log('‚ùå Cl√© API Gemini non configur√©e');
      return res.status(503).json({
        error: 'Service non disponible',
        message: 'Cl√© API Gemini non configur√©e',
        help: 'Configurez GEMINI_API_KEY dans Vercel'
      });
    }

    console.log('‚úÖ Messages valides re√ßus:', messages.length, 'messages');
    console.log('üîß Mode valid√© activ√©:', useValidatedMode);

    // Validation avanc√©e des messages
    const validatedMessages = messages.map((msg, index) => {
      if (!msg.role || !msg.content) {
        throw new Error(`Message ${index + 1} invalide: role et content requis`);
      }
      
      if (!['user', 'assistant', 'system'].includes(msg.role)) {
        throw new Error(`Message ${index + 1}: role invalide (${msg.role})`);
      }
      
      return {
        role: msg.role === 'assistant' ? 'model' : 'user',
        parts: [{ text: String(msg.content) }]
      };
    });

    console.log('üîß Initialisation Gemini avec model: gemini-2.0-flash-exp');
    console.log('üì§ Envoi de la requ√™te √† Gemini');

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: validatedMessages,
        generationConfig: {
          maxOutputTokens: 2000,
          temperature: 0.7,
          topP: 0.8,
          topK: 40
        },
        safetySettings: [
          {
            category: 'HARM_CATEGORY_HARASSMENT',
            threshold: 'BLOCK_MEDIUM_AND_ABOVE'
          },
          {
            category: 'HARM_CATEGORY_HATE_SPEECH',
            threshold: 'BLOCK_MEDIUM_AND_ABOVE'
          }
        ]
      })
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå Erreur Gemini API:', response.status, errorData);
      throw new Error(`Gemini API error: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    console.log('‚úÖ R√©ponse Gemini re√ßue');

    const responseText = data?.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!responseText) {
      console.error('‚ùå R√©ponse Gemini vide:', data);
      throw new Error('R√©ponse vide de Gemini');
    }

    console.log('‚úÖ R√©ponse valid√©e et envoy√©e');

    return res.status(200).json({
      success: true,
      response: responseText,
      usage: {
        promptTokens: data?.usageMetadata?.promptTokenCount || 0,
        responseTokens: data?.usageMetadata?.candidatesTokenCount || 0,
        totalTokens: data?.usageMetadata?.totalTokenCount || 0
      },
      model: 'gemini-2.0-flash-exp',
      validated: useValidatedMode,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'appel √† Gemini:', error?.message || String(error));
    
    return res.status(500).json({
      error: 'Erreur lors de l\'appel √† Gemini',
      details: error?.message || String(error),
      timestamp: new Date().toISOString()
    });
  }
}
