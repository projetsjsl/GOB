// ========================================
// API ROUTE VERCEL - CL√â GEMINI
// ========================================

export default async function handler(req, res) {
  try {
    // Ajouter des headers CORS pour √©viter les probl√®mes de cross-origin
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    // G√©rer les requ√™tes OPTIONS (preflight)
    if (req.method === 'OPTIONS') {
      return res.status(200).end();
    }

    // V√©rifier que c'est une requ√™te GET
    if (req.method !== 'GET') {
      console.log('‚ùå M√©thode non autoris√©e:', req.method);
      return res.status(405).json({ error: 'M√©thode non autoris√©e' });
    }

    console.log('üîë Tentative de r√©cup√©ration de la cl√© API Gemini...');

    // R√©cup√©rer la cl√© API depuis les variables d'environnement Vercel
    const geminiApiKey = process.env.GEMINI_API_KEY;

    console.log('üîç Variables d\'environnement disponibles:', Object.keys(process.env).filter(key => key.includes('GEMINI')));
    console.log('üîë Cl√© API trouv√©e:', geminiApiKey ? 'OUI (masqu√©e)' : 'NON');

    if (!geminiApiKey) {
      console.log('‚ùå Cl√© API Gemini non configur√©e');
      return res.status(500).json({
        error: 'Cl√© API Gemini non configur√©e',
        message: 'Veuillez configurer la variable d\'environnement GEMINI_API_KEY dans Vercel',
        debug: {
          availableEnvVars: Object.keys(process.env).filter(key => key.includes('GEMINI')),
          timestamp: new Date().toISOString()
        }
      });
    }

    console.log('‚úÖ Cl√© API Gemini r√©cup√©r√©e avec succ√®s');

    // Retourner seulement la validation (ne pas exposer la cl√© compl√®te)
    // Si le client a besoin de la cl√©, il doit l'obtenir via localStorage ou appeler directement l'API
    const keyPreview = `${geminiApiKey.substring(0, 8)}...${geminiApiKey.substring(geminiApiKey.length - 4)}`;

    return res.status(200).json({
      configured: true,
      source: 'vercel-env',
      keyPreview: keyPreview,
      timestamp: new Date().toISOString(),
      status: 'success',
      message: 'Cl√© API Gemini configur√©e sur le serveur',
      // Pour les clients qui ont besoin de la cl√© compl√®te (usage interne s√©curis√©)
      // On peut ajouter un param√®tre ?full=true avec authentification
      ...(req.query.full === 'true' ? { apiKey: geminiApiKey } : {})
    });
  } catch (error) {
    console.error('‚ùå Erreur dans gemini-key API:', error);
    return res.status(500).json({
      error: 'Internal server error',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
}