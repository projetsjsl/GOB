#!/bin/bash
# ============================================================================
# DEPLOY CHATGPT INTEGRATION - Script de d√©ploiement et test
# ============================================================================
#
# Ce script d√©ploie l'int√©gration ChatGPT et ex√©cute les tests de validation
#
# Usage: bash deploy-chatgpt-integration.sh
# ============================================================================

set -e  # Arr√™ter en cas d'erreur

echo "üöÄ D√©ploiement de l'int√©gration ChatGPT"
echo "======================================"
echo ""

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour les logs color√©s
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    log_error "package.json non trouv√©. Assurez-vous d'√™tre dans le r√©pertoire racine du projet."
    exit 1
fi

# V√©rifier que Vercel CLI est install√©
if ! command -v vercel &> /dev/null; then
    log_error "Vercel CLI n'est pas install√©. Installez-le avec: npm i -g vercel"
    exit 1
fi

# V√©rifier que les d√©pendances sont install√©es
log_info "V√©rification des d√©pendances..."
if [ ! -d "node_modules" ]; then
    log_info "Installation des d√©pendances..."
    npm install
fi

# V√©rifier les variables d'environnement
log_info "V√©rification des variables d'environnement..."

# V√©rifier OPENAI_API_KEY
if [ -z "$OPENAI_API_KEY" ]; then
    log_warning "OPENAI_API_KEY non d√©finie localement"
    log_info "V√©rification dans Vercel..."
    if ! vercel env ls | grep -q "OPENAI_API_KEY"; then
        log_error "OPENAI_API_KEY non configur√©e dans Vercel"
        log_info "Ajoutez-la avec: vercel env add OPENAI_API_KEY"
        exit 1
    fi
else
    log_success "OPENAI_API_KEY configur√©e localement"
fi

# V√©rifier GEMINI_API_KEY
if [ -z "$GEMINI_API_KEY" ]; then
    log_warning "GEMINI_API_KEY non d√©finie localement"
    log_info "V√©rification dans Vercel..."
    if ! vercel env ls | grep -q "GEMINI_API_KEY"; then
        log_error "GEMINI_API_KEY non configur√©e dans Vercel"
        log_info "Ajoutez-la avec: vercel env add GEMINI_API_KEY"
        exit 1
    fi
else
    log_success "GEMINI_API_KEY configur√©e localement"
fi

# V√©rifier PERPLEXITY_API_KEY
if [ -z "$PERPLEXITY_API_KEY" ]; then
    log_warning "PERPLEXITY_API_KEY non d√©finie localement"
    log_info "V√©rification dans Vercel..."
    if ! vercel env ls | grep -q "PERPLEXITY_API_KEY"; then
        log_error "PERPLEXITY_API_KEY non configur√©e dans Vercel"
        log_info "Ajoutez-la avec: vercel env add PERPLEXITY_API_KEY"
        exit 1
    fi
else
    log_success "PERPLEXITY_API_KEY configur√©e localement"
fi

# Build du projet
log_info "Build du projet..."
npm run build

if [ $? -eq 0 ]; then
    log_success "Build r√©ussi"
else
    log_error "√âchec du build"
    exit 1
fi

# D√©ploiement sur Vercel
log_info "D√©ploiement sur Vercel..."
vercel --prod

if [ $? -eq 0 ]; then
    log_success "D√©ploiement r√©ussi"
else
    log_error "√âchec du d√©ploiement"
    exit 1
fi

# Attendre que le d√©ploiement soit pr√™t
log_info "Attente de la disponibilit√© du d√©ploiement..."
sleep 10

# R√©cup√©rer l'URL du d√©ploiement
DEPLOY_URL=$(vercel ls | head -n 2 | tail -n 1 | awk '{print $2}')
if [ -z "$DEPLOY_URL" ]; then
    log_error "Impossible de r√©cup√©rer l'URL du d√©ploiement"
    exit 1
fi

log_success "URL du d√©ploiement: https://$DEPLOY_URL"

# Ex√©cuter les tests d'int√©gration
log_info "Ex√©cution des tests d'int√©gration..."

# Mettre √† jour l'URL dans le script de test
export VERCEL_URL="$DEPLOY_URL"

# Ex√©cuter le script de test
if [ -f "test-chatgpt-integration.js" ]; then
    node test-chatgpt-integration.js
    if [ $? -eq 0 ]; then
        log_success "Tous les tests sont pass√©s"
    else
        log_warning "Certains tests ont √©chou√©"
    fi
else
    log_warning "Script de test non trouv√©"
fi

# Afficher les endpoints disponibles
echo ""
log_info "Endpoints ChatGPT disponibles:"
echo "  ‚Ä¢ https://$DEPLOY_URL/api/chatgpt/chat.js"
echo "  ‚Ä¢ https://$DEPLOY_URL/api/chatgpt/tools.js"
echo "  ‚Ä¢ https://$DEPLOY_URL/api/ai-services.js"

# Afficher les commandes de test
echo ""
log_info "Commandes de test:"
echo "  # Test ChatGPT simple"
echo "  curl -X POST https://$DEPLOY_URL/api/chatgpt/chat.js \\"
echo "    -H 'Content-Type: application/json' \\"
echo "    -d '{\"message\": \"Bonjour Emma!\"}'"
echo ""
echo "  # Test AI Services avec fallback"
echo "  curl -X POST https://$DEPLOY_URL/api/ai-services.js \\"
echo "    -H 'Content-Type: application/json' \\"
echo "    -d '{\"message\": \"Analyse AAPL\", \"preferred_provider\": \"auto\"}'"

echo ""
log_success "üéâ Int√©gration ChatGPT d√©ploy√©e avec succ√®s!"
echo ""
log_info "Prochaines √©tapes:"
echo "  1. Tester les endpoints manuellement"
echo "  2. Int√©grer dans le frontend si n√©cessaire"
echo "  3. Configurer le monitoring des performances"
echo "  4. Documenter les cas d'usage sp√©cifiques"

echo ""
log_info "Pour plus d'informations, consultez CHATGPT-INTEGRATION-GUIDE.md"