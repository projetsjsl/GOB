// ============================================================================
// Test Email Briefings System
// Script de test pour valider le syst√®me de briefings email
// ============================================================================

import fetch from 'node-fetch';

const BASE_URL = process.env.VERCEL_URL 
    ? `https://${process.env.VERCEL_URL}` 
    : 'http://localhost:3000';

console.log('üß™ Test du syst√®me Email Briefings');
console.log('=====================================');
console.log(`URL de base: ${BASE_URL}`);
console.log('');

// Fonction utilitaire pour les tests
async function testEndpoint(name, url, options = {}) {
    console.log(`\nüì° Test: ${name}`);
    console.log(`URL: ${url}`);
    
    try {
        const response = await fetch(url, {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            ...options
        });
        
        const data = await response.json();
        
        if (response.ok) {
            console.log(`‚úÖ Succ√®s (${response.status})`);
            console.log(`R√©ponse:`, JSON.stringify(data, null, 2));
            return { success: true, data };
        } else {
            console.log(`‚ùå Erreur (${response.status})`);
            console.log(`Erreur:`, data);
            return { success: false, error: data };
        }
    } catch (error) {
        console.log(`üí• Exception: ${error.message}`);
        return { success: false, error: error.message };
    }
}

// Tests des endpoints
async function runTests() {
    console.log('üöÄ D√©marrage des tests...\n');
    
    // Test 1: Collecte de donn√©es briefing matin
    const dataResult = await testEndpoint(
        'Collecte donn√©es briefing matin',
        `${BASE_URL}/api/briefing-data?type=morning`
    );
    
    if (!dataResult.success) {
        console.log('‚ùå Test des donn√©es √©chou√©, arr√™t des tests');
        return;
    }
    
    // Test 2: Recherche Perplexity
    const newsResult = await testEndpoint(
        'Recherche Perplexity',
        `${BASE_URL}/api/perplexity-search`,
        {
            method: 'POST',
            body: JSON.stringify({
                prompt: 'Recherche les actualit√©s financi√®res r√©centes',
                recency: 'day'
            })
        }
    );
    
    // Test 3: Analyse OpenAI
    const analysisResult = await testEndpoint(
        'Analyse OpenAI',
        `${BASE_URL}/api/openai-analysis`,
        {
            method: 'POST',
            body: JSON.stringify({
                prompt: 'Analyse les donn√©es de march√© suivantes',
                marketData: dataResult.data?.data || {},
                news: newsResult.data?.content || 'Aucune actualit√©'
            })
        }
    );
    
    // Test 4: Sauvegarde briefing
    const saveResult = await testEndpoint(
        'Sauvegarde briefing',
        `${BASE_URL}/api/supabase-briefings`,
        {
            method: 'POST',
            body: JSON.stringify({
                type: 'morning',
                subject: 'Test Briefing Matin',
                html_content: '<html><body><h1>Test Briefing</h1></body></html>',
                market_data: dataResult.data?.data || {},
                analysis: analysisResult.data?.content || 'Test analyse'
            })
        }
    );
    
    // Test 5: R√©cup√©ration historique
    const historyResult = await testEndpoint(
        'R√©cup√©ration historique',
        `${BASE_URL}/api/supabase-briefings?limit=5`
    );
    
    // Test 6: Envoi email (simulation)
    const emailResult = await testEndpoint(
        'Envoi email (simulation)',
        `${BASE_URL}/api/resend-email`,
        {
            method: 'POST',
            body: JSON.stringify({
                recipients: ['test@example.com'],
                subject: 'Test Email Briefing',
                html: '<html><body><h1>Test Email</h1></body></html>'
            })
        }
    );
    
    // R√©sum√© des tests
    console.log('\nüìä R√©sum√© des tests');
    console.log('===================');
    console.log(`‚úÖ Collecte donn√©es: ${dataResult.success ? 'OK' : '√âCHEC'}`);
    console.log(`‚úÖ Recherche Perplexity: ${newsResult.success ? 'OK' : '√âCHEC'}`);
    console.log(`‚úÖ Analyse OpenAI: ${analysisResult.success ? 'OK' : '√âCHEC'}`);
    console.log(`‚úÖ Sauvegarde briefing: ${saveResult.success ? 'OK' : '√âCHEC'}`);
    console.log(`‚úÖ R√©cup√©ration historique: ${historyResult.success ? 'OK' : '√âCHEC'}`);
    console.log(`‚úÖ Envoi email: ${emailResult.success ? 'OK' : '√âCHEC'}`);
    
    const successCount = [dataResult, newsResult, analysisResult, saveResult, historyResult, emailResult]
        .filter(r => r.success).length;
    
    console.log(`\nüéØ Score: ${successCount}/6 tests r√©ussis`);
    
    if (successCount === 6) {
        console.log('üéâ Tous les tests sont pass√©s avec succ√®s !');
    } else if (successCount >= 4) {
        console.log('‚ö†Ô∏è La plupart des tests sont pass√©s, quelques ajustements n√©cessaires');
    } else {
        console.log('‚ùå Plusieurs tests ont √©chou√©, v√©rifiez la configuration');
    }
}

// Test des diff√©rents types de briefing
async function testAllBriefingTypes() {
    console.log('\nüîÑ Test des diff√©rents types de briefing');
    console.log('========================================');
    
    const types = ['morning', 'noon', 'evening'];
    
    for (const type of types) {
        console.log(`\nüìä Test briefing ${type}...`);
        const result = await testEndpoint(
            `Briefing ${type}`,
            `${BASE_URL}/api/briefing-data?type=${type}`
        );
        
        if (result.success) {
            console.log(`‚úÖ Donn√©es ${type} r√©cup√©r√©es avec succ√®s`);
            console.log(`   - Type: ${result.data.type}`);
            console.log(`   - Donn√©es disponibles: ${Object.keys(result.data.data || {}).join(', ')}`);
        } else {
            console.log(`‚ùå √âchec du briefing ${type}`);
        }
    }
}

// Fonction principale
async function main() {
    try {
        await runTests();
        await testAllBriefingTypes();
        
        console.log('\nüèÅ Tests termin√©s');
        console.log('================');
        console.log('Pour tester l\'interface utilisateur:');
        console.log('1. Ouvrez le dashboard dans votre navigateur');
        console.log('2. Cliquez sur l\'onglet "üìß Briefings Email"');
        console.log('3. Testez la g√©n√©ration de briefings');
        console.log('4. V√©rifiez la pr√©visualisation et la sauvegarde');
        
    } catch (error) {
        console.error('üí• Erreur lors des tests:', error);
        process.exit(1);
    }
}

// Ex√©cuter les tests si ce script est appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
    main();
}

export { runTests, testAllBriefingTypes };
