#!/bin/bash

# Script de r√©solution automatique des conflits Icon Component
# GOB - 2025-10-31

set -e

echo "üîß R√©solution des conflits Icon Component System"
echo "================================================"
echo ""

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# √âtape 1: V√©rifier qu'on est sur main
echo -e "${YELLOW}[1/6]${NC} V√©rification de la branche actuelle..."
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" != "main" ]; then
    echo -e "${YELLOW}‚Üí Basculement vers main...${NC}"
    git checkout main
fi

# √âtape 2: Mettre √† jour main
echo -e "${YELLOW}[2/6]${NC} Mise √† jour de la branche main..."
git pull origin main

# √âtape 3: Cr√©er une nouvelle branche pour r√©soudre les conflits
echo -e "${YELLOW}[3/6]${NC} Cr√©ation de la branche de r√©solution..."
BRANCH_NAME="claude/icon-system-resolved-$(date +%s)"
git checkout -b "$BRANCH_NAME"
echo -e "${GREEN}‚úì Branche cr√©√©e: $BRANCH_NAME${NC}"

# √âtape 4: Tenter le merge
echo -e "${YELLOW}[4/6]${NC} Tentative de merge de la branche Icon Component..."
if git merge origin/claude/review-documentation-icons-011CUfC3sifZEgTUjntG6gSD --no-ff -m "feat: Compl√©ter le syst√®me Icon Component (r√©solution conflits)"; then
    echo -e "${GREEN}‚úì Merge r√©ussi sans conflits!${NC}"
    CONFLICTS=false
else
    echo -e "${RED}‚ö† Conflits d√©tect√©s comme pr√©vu${NC}"
    CONFLICTS=true
fi

# √âtape 5: R√©soudre les conflits automatiquement
if [ "$CONFLICTS" = true ]; then
    echo -e "${YELLOW}[5/6]${NC} R√©solution automatique des conflits..."

    # V√©rifier si le fichier a des conflits
    if git diff --name-only --diff-filter=U | grep -q "beta-combined-dashboard.html"; then
        echo "‚Üí Conflit trouv√© dans beta-combined-dashboard.html"
        echo "‚Üí Strat√©gie: Accepter la version Icon component (theirs)"

        # Accepter la version de la branche Icon component pour les zones de conflit
        git checkout --theirs public/beta-combined-dashboard.html

        # Ajouter le fichier r√©solu
        git add public/beta-combined-dashboard.html

        # Finaliser le merge
        git commit -m "feat: R√©soudre conflits Icon component avec m√©tadonn√©es Emma

- Acceptation de la version Icon component pour coh√©rence UI
- M√©tadonn√©es Emma utilisent maintenant <Icon emoji='...' />
- Pr√©serve les 5 commits de la branche review-documentation-icons

Commits inclus:
- e62ff90 feat: Impl√©mentation syst√®me de toggle Emoji/Iconoir (Phase 1)
- 1450cea feat: Remplacement manuel emojis ‚Üí Icon component (Batch 1/10)
- 396a230 feat: Remplacement emojis ‚Üí Icon component (Batch 2/10)
- 92bd880 feat: Remplacement emojis ‚Üí Icon component (Batch 3/10)
- 46eb9cf feat: Remplacement emojis ‚Üí Icon component (Batch 4/7)"

        echo -e "${GREEN}‚úì Conflits r√©solus et commit cr√©√©${NC}"
    else
        echo -e "${RED}‚úó Aucun conflit trouv√© dans le fichier attendu${NC}"
        exit 1
    fi
fi

# √âtape 6: Pousser la branche
echo -e "${YELLOW}[6/6]${NC} Push de la branche vers le remote..."

# V√©rifier si la branche commence par claude/ et contient l'ID de session correct
if [[ $BRANCH_NAME == claude/* ]]; then
    echo "‚Üí Branche valide pour le push"
    echo "‚Üí Push vers origin/$BRANCH_NAME..."

    if git push -u origin "$BRANCH_NAME"; then
        echo -e "${GREEN}‚úì Push r√©ussi!${NC}"
        echo ""
        echo "================================================"
        echo -e "${GREEN}‚úÖ SUCC√àS!${NC}"
        echo "================================================"
        echo ""
        echo "La branche $BRANCH_NAME a √©t√© cr√©√©e et pouss√©e."
        echo ""
        echo "üîó Prochaine √©tape: Cr√©er la Pull Request"
        echo ""
        echo "URL de cr√©ation de PR:"
        echo "https://github.com/projetsjsl/GOB/compare/main...$BRANCH_NAME"
        echo ""
        echo "Titre sugg√©r√©:"
        echo "feat: Compl√©ter le syst√®me Icon Component (5 commits)"
        echo ""
        echo "Utilisez la description de la PR #4 dans PR_CREATION_GUIDE.md"
        echo ""
    else
        echo -e "${RED}‚úó Erreur lors du push${NC}"
        echo "Si l'erreur est 403, v√©rifiez que la branche commence par 'claude/'"
        exit 1
    fi
else
    echo -e "${RED}‚úó Nom de branche invalide${NC}"
    echo "La branche doit commencer par 'claude/' pour √™tre autoris√©e au push"
    exit 1
fi

echo "================================================"
echo ""
echo "üìã R√©sum√© des actions effectu√©es:"
echo "  1. ‚úÖ Mise √† jour de main"
echo "  2. ‚úÖ Cr√©ation de la branche $BRANCH_NAME"
echo "  3. ‚úÖ Merge de review-documentation-icons"
echo "  4. ‚úÖ R√©solution des conflits (strat√©gie: Icon component)"
echo "  5. ‚úÖ Commit de r√©solution"
echo "  6. ‚úÖ Push vers origin"
echo ""
echo "üéØ Prochaines √©tapes:"
echo "  1. Ouvrir l'URL ci-dessus pour cr√©er la PR"
echo "  2. Copier la description depuis PR_CREATION_GUIDE.md"
echo "  3. Cr√©er et merger la PR"
echo "  4. V√©rifier le d√©ploiement Vercel"
echo ""
