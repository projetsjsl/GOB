// ========================================
// TEST GEMINI WITH FUNCTION CALLING
// Script de test pour valider l'API avec function calling
// ========================================

import https from 'https';

// Configuration
const API_BASE_URL = 'https://gob-jsla.vercel.app'; // Remplacez par votre URL Vercel
const TEST_QUESTIONS = [
    "Quel est le prix actuel de Tesla (TSLA) ?",
    "Donne-moi les derni√®res actualit√©s sur Apple (AAPL)",
    "Compare Microsoft (MSFT) et Google (GOOGL) en termes de capitalisation boursi√®re",
    "Analyse les donn√©es de march√© de NVIDIA (NVDA)",
    "Quelles sont les actualit√©s r√©centes sur les actions canadiennes comme TD Bank (TD) ?"
];

// Fonction pour tester l'API
async function testGeminiWithFunctions(question, temperature = 0.3) {
    return new Promise((resolve, reject) => {
        const postData = JSON.stringify({
            message: question,
            temperature: temperature
        });

        const options = {
            hostname: 'gob-jsla.vercel.app',
            port: 443,
            path: '/api/gemini-with-functions',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };

        const req = https.request(options, (res) => {
            let data = '';

            res.on('data', (chunk) => {
                data += chunk;
            });

            res.on('end', () => {
                try {
                    const response = JSON.parse(data);
                    resolve({
                        status: res.statusCode,
                        response: response,
                        question: question
                    });
                } catch (error) {
                    reject({
                        status: res.statusCode,
                        error: error.message,
                        rawData: data,
                        question: question
                    });
                }
            });
        });

        req.on('error', (error) => {
            reject({
                error: error.message,
                question: question
            });
        });

        req.write(postData);
        req.end();
    });
}

// Fonction principale de test
async function runTests() {
    console.log('üß™ Test de Gemini avec Function Calling');
    console.log('=====================================\n');

    const results = [];
    
    for (let i = 0; i < TEST_QUESTIONS.length; i++) {
        const question = TEST_QUESTIONS[i];
        console.log(`\nüìù Test ${i + 1}/${TEST_QUESTIONS.length}: ${question}`);
        console.log('‚îÄ'.repeat(80));
        
        try {
            const result = await testGeminiWithFunctions(question);
            results.push(result);
            
            if (result.status === 200) {
                console.log('‚úÖ Succ√®s');
                console.log(`üìä R√©ponse (${result.response.response?.length || 0} caract√®res):`);
                console.log(result.response.response?.substring(0, 200) + '...');
                console.log(`üå°Ô∏è Temp√©rature utilis√©e: ${result.response.temperature}`);
                console.log(`üîß Source: ${result.response.source}`);
            } else {
                console.log('‚ùå Erreur HTTP:', result.status);
                console.log('üìÑ R√©ponse:', result.response);
            }
        } catch (error) {
            console.log('‚ùå Erreur:', error.error || error.message);
            results.push({
                status: 'error',
                error: error.error || error.message,
                question: question
            });
        }
        
        // Pause entre les tests pour √©viter les limites de taux
        if (i < TEST_QUESTIONS.length - 1) {
            console.log('\n‚è≥ Pause de 2 secondes...');
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }
    
    // R√©sum√© des r√©sultats
    console.log('\nüìã R√âSUM√â DES TESTS');
    console.log('==================');
    
    const successful = results.filter(r => r.status === 200).length;
    const failed = results.filter(r => r.status !== 200).length;
    
    console.log(`‚úÖ Tests r√©ussis: ${successful}/${TEST_QUESTIONS.length}`);
    console.log(`‚ùå Tests √©chou√©s: ${failed}/${TEST_QUESTIONS.length}`);
    
    if (failed > 0) {
        console.log('\nüîç D√âTAILS DES √âCHECS:');
        results.filter(r => r.status !== 200).forEach((result, index) => {
            console.log(`${index + 1}. ${result.question}`);
            console.log(`   Erreur: ${result.error || result.response?.error || 'Inconnue'}`);
        });
    }
    
    console.log('\nüéØ RECOMMANDATIONS:');
    if (successful === TEST_QUESTIONS.length) {
        console.log('‚úÖ Tous les tests sont pass√©s ! L\'API Function Calling fonctionne parfaitement.');
        console.log('‚úÖ Emma peut maintenant acc√©der aux donn√©es financi√®res en temps r√©el.');
    } else if (successful > 0) {
        console.log('‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration des APIs.');
        console.log('üîß Assurez-vous que les variables d\'environnement sont correctement configur√©es.');
    } else {
        console.log('‚ùå Tous les tests ont √©chou√©. V√©rifiez la configuration compl√®te.');
        console.log('üîß V√©rifiez: GEMINI_API_KEY, d√©ploiement Vercel, et connectivit√© r√©seau.');
    }
}

// Ex√©cuter les tests si le script est appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
    runTests().catch(console.error);
}

export { testGeminiWithFunctions, runTests };
