/**
 * Diagnostic du Probl√®me Supabase
 * Identifie pourquoi Supabase ne fonctionne pas
 */

const diagnoseSupabaseIssue = async () => {
  console.log('üîç DIAGNOSTIC DU PROBL√àME SUPABASE');
  console.log('===================================');
  console.log('');

  // Test 1: API Supabase Watchlist
  console.log('üß™ TEST 1: API Supabase Watchlist');
  console.log('----------------------------------');
  
  try {
    const response = await fetch('https://gobapps.com/api/supabase-watchlist');
    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ API Supabase Watchlist fonctionnelle');
      console.log('   Donn√©es:', JSON.stringify(data).substring(0, 100) + '...');
    } else {
      console.log('‚ùå API Supabase Watchlist √©chou√©e:', response.status);
      console.log('   Erreur:', data.error || 'Inconnue');
      console.log('   D√©tails:', data.details || 'Aucun d√©tail');
    }
  } catch (error) {
    console.log('‚ùå Erreur API Supabase Watchlist:', error.message);
  }
  console.log('');

  // Test 2: API Hybride
  console.log('üß™ TEST 2: API Hybride');
  console.log('----------------------');
  
  try {
    const response = await fetch('https://gobapps.com/api/hybrid-data?symbol=AAPL&dataType=quote&syncIfNeeded=true');
    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ API Hybride fonctionnelle');
      console.log(`   Source: ${data.source}`);
      console.log(`   Donn√©es: ${data.data ? 'Pr√©sentes' : 'Manquantes'}`);
      
      if (data.source === 'local') {
        console.log('üéâ Cache local Supabase fonctionnel !');
      } else {
        console.log('‚ö†Ô∏è Utilisation des APIs externes (Supabase non actif)');
      }
    } else {
      console.log('‚ùå API Hybride √©chou√©e:', response.status);
    }
  } catch (error) {
    console.log('‚ùå Erreur API Hybride:', error.message);
  }
  console.log('');

  // Test 3: V√©rifier les logs Vercel (simulation)
  console.log('üìã DIAGNOSTIC PROBABLE');
  console.log('----------------------');
  
  console.log('üîç Causes possibles du probl√®me Supabase:');
  console.log('');
  console.log('1. ‚ùå Variables d\'environnement manquantes:');
  console.log('   - SUPABASE_URL non configur√© dans Vercel');
  console.log('   - SUPABASE_ANON_KEY non configur√© dans Vercel');
  console.log('');
  console.log('2. ‚ùå Projet Supabase non cr√©√©:');
  console.log('   - Projet gob-watchlist n\'existe pas');
  console.log('   - Projet cr√©√© mais inactif');
  console.log('');
  console.log('3. ‚ùå Tables non cr√©√©es:');
  console.log('   - Script supabase-historical-tables.sql non ex√©cut√©');
  console.log('   - Tables cr√©√©es mais avec erreurs');
  console.log('');
  console.log('4. ‚ùå Permissions insuffisantes:');
  console.log('   - Cl√© API incorrecte');
  console.log('   - Politiques RLS trop restrictives');
  console.log('');

  // Solutions
  console.log('üîß SOLUTIONS RECOMMAND√âES');
  console.log('-------------------------');
  console.log('');
  console.log('üìã √âTAPE 1: V√©rifier les Variables d\'Environnement');
  console.log('1. Aller sur Vercel Dashboard');
  console.log('2. Projet GOB ‚Üí Settings ‚Üí Environment Variables');
  console.log('3. V√©rifier que SUPABASE_URL et SUPABASE_ANON_KEY existent');
  console.log('4. Si manquantes, les ajouter');
  console.log('');
  console.log('üìã √âTAPE 2: V√©rifier le Projet Supabase');
  console.log('1. Aller sur https://supabase.com');
  console.log('2. V√©rifier que le projet gob-watchlist existe');
  console.log('3. V√©rifier qu\'il est actif');
  console.log('');
  console.log('üìã √âTAPE 3: Cr√©er les Tables');
  console.log('1. Dans Supabase Dashboard ‚Üí SQL Editor');
  console.log('2. Copier le contenu de supabase-historical-tables.sql');
  console.log('3. Ex√©cuter le script');
  console.log('');
  console.log('üìã √âTAPE 4: Red√©ployer');
  console.log('1. Dans Vercel Dashboard ‚Üí Deployments');
  console.log('2. Cliquer "Redeploy"');
  console.log('3. Attendre la fin du d√©ploiement');
  console.log('');

  // Test final
  console.log('üß™ TEST FINAL RECOMMAND√â');
  console.log('------------------------');
  console.log('Apr√®s avoir suivi les √©tapes ci-dessus, relancer:');
  console.log('node test-gob-watchlist-supabase.js');
  console.log('');
  console.log('üéØ R√âSULTAT ATTENDU:');
  console.log('‚úÖ Variables d\'environnement configur√©es');
  console.log('‚úÖ Connexion Supabase r√©ussie');
  console.log('‚úÖ Tables cr√©√©es');
  console.log('‚úÖ API hybride avec cache local');
  console.log('');
};

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  diagnoseSupabaseIssue().catch(console.error);
}

export { diagnoseSupabaseIssue };
