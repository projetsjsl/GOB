#!/bin/bash

# ============================================================================
# SCRIPT DE TEST D√âTAILL√â - TOUTES LES APIs
# ============================================================================
# Ce script teste toutes les APIs en d√©tail pour identifier les probl√®mes
# ============================================================================

echo "üîç TEST D√âTAILL√â DE TOUTES LES APIs - Emma En Direct"
echo "====================================================="
echo ""

BASE_URL="https://gobapps.com"

# Test 1: Variables d'environnement
echo "1Ô∏è‚É£  Variables d'environnement..."
curl -s -X GET "$BASE_URL/api/ai-services" | jq -r '.debug | "OpenAI: \(.openai_key), Anthropic: \(.anthropic_key), Perplexity: \(.perplexity_key)"'
echo ""

# Test 2: APIs principales
echo "2Ô∏è‚É£  APIs principales..."

echo "   ü§ñ AI Services..."
curl -s -X POST "$BASE_URL/api/ai-services" \
  -H "Content-Type: application/json" \
  -d '{"service": "openai", "prompt": "Test", "marketData": {}, "news": "Test"}' \
  | jq -r '"Mod√®le: \(.model), Fallback: \(.fallback), Longueur: \(.content | length)"'

echo "   üìä Market Data (Yahoo Finance)..."
curl -s "$BASE_URL/api/marketdata?endpoint=quote&symbol=AAPL&source=yahoo" \
  | jq -r '"Erreur: \(.error // "Aucune"), Prix: \(.c // "N/A")"'

echo "   üóÑÔ∏è  Supabase Watchlist..."
curl -s "$BASE_URL/api/supabase-watchlist" \
  | jq -r '"Succ√®s: \(.success), Tickers: \(.count), Source: \(.source)"'

echo "   üìß Resend Email..."
curl -s -X POST "$BASE_URL/api/ai-services" \
  -H "Content-Type: application/json" \
  -d '{"service": "resend", "to": ["test@example.com"], "subject": "Test", "html": "<p>Test</p>"}' \
  | jq -r '"Succ√®s: \(.success), Erreur: \(.error // "Aucune")"'

echo ""

# Test 3: APIs externes (via Market Data)
echo "3Ô∏è‚É£  APIs externes via Market Data..."

echo "   üìà Yahoo Finance..."
curl -s "$BASE_URL/api/marketdata?endpoint=quote&symbol=AAPL&source=yahoo" \
  | jq -r '"Source: \(.source // "Erreur"), Prix: \(.c // "N/A")"'

echo "   üè¶ Financial Modeling Prep..."
curl -s "$BASE_URL/api/marketdata?endpoint=quote&symbol=AAPL&source=fmp" \
  | jq -r '"Source: \(.source // "Erreur"), Prix: \(.c // "N/A")"'

echo "   üìä Alpha Vantage..."
curl -s "$BASE_URL/api/marketdata?endpoint=quote&symbol=AAPL&source=alpha" \
  | jq -r '"Source: \(.source // "Erreur"), Prix: \(.c // "N/A")"'

echo "   üî¢ Twelve Data..."
curl -s "$BASE_URL/api/marketdata?endpoint=quote&symbol=AAPL&source=twelve" \
  | jq -r '"Source: \(.source // "Erreur"), Prix: \(.c // "N/A")"'

echo "   ü¶å Finnhub..."
curl -s "$BASE_URL/api/marketdata?endpoint=quote&symbol=AAPL&source=finnhub" \
  | jq -r '"Source: \(.source // "Erreur"), Prix: \(.c // "N/A")"'

echo ""

# Test 4: APIs Gemini
echo "4Ô∏è‚É£  APIs Gemini..."

echo "   üí¨ Gemini Chat Simple..."
curl -s -X POST "$BASE_URL/api/gemini/chat" \
  -H "Content-Type: application/json" \
  -d '{"messages": [{"role": "user", "content": "Test"}]}' \
  | jq -r '"Source: \(.source), Longueur: \(.response | length)"'

echo "   ‚úÖ Gemini Chat Valid√©..."
curl -s -X POST "$BASE_URL/api/gemini/chat-validated" \
  -H "Content-Type: application/json" \
  -d '{"messages": [{"role": "user", "content": "Test"}], "useValidatedMode": true}' \
  | jq -r '"Succ√®s: \(.success), Mod√®le: \(.model)"'

echo ""

# Test 5: APIs utilitaires
echo "5Ô∏è‚É£  APIs utilitaires..."

echo "   üîß GitHub Update..."
curl -s "$BASE_URL/api/github-update" \
  | jq -r '"Statut: \(.error // "OK")"'

echo "   üß™ Test Gemini..."
curl -s "$BASE_URL/api/test-gemini" \
  | jq -r '"Statut: \(.status // "Erreur")"'

echo "   üîë Gemini Key..."
curl -s "$BASE_URL/api/gemini-key" \
  | jq -r '"Statut: \(.status // "Erreur")"'

echo "   ‚è∞ Briefing Cron..."
curl -s "$BASE_URL/api/briefing-cron" \
  | jq -r '"Statut: \(.status // "Erreur")"'

echo ""

# Test 6: Diagnostic global
echo "6Ô∏è‚É£  Diagnostic global..."
curl -s "$BASE_URL/api/health-check-simple" \
  | jq -r '"Statut global: \(.health.overall_status), APIs saines: \(.health.healthy_apis)/\(.health.total_apis)"'

echo ""
echo "‚úÖ Tests d√©taill√©s termin√©s !"
echo ""
echo "üìä R√âSUM√â :"
echo "- APIs principales : V√©rifiez les r√©sultats ci-dessus"
echo "- APIs externes : V√©rifiez les sources et prix"
echo "- APIs Gemini : V√©rifiez les r√©ponses"
echo "- APIs utilitaires : V√©rifiez les statuts"
echo ""
echo "üîß ACTIONS N√âCESSAIRES :"
echo "- Si erreurs 500 : V√©rifier les cl√©s API dans Vercel"
echo "- Si prix N/A : V√©rifier les sources de donn√©es"
echo "- Si fallback : V√©rifier la configuration des APIs"
