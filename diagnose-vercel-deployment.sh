#!/bin/bash

# Script de diagnostic pour le d√©ploiement Vercel
echo "üîç Diagnostic du d√©ploiement Vercel"
echo "==================================="
echo ""

BASE_URL="https://gob.vercel.app"

echo "üìã V√©rification des fichiers locaux..."
echo ""

# V√©rifier que les fichiers existent
echo "1. Fichiers API:"
if [ -f "api/gemini/chat.js" ]; then
    echo "   ‚úÖ api/gemini/chat.js existe"
else
    echo "   ‚ùå api/gemini/chat.js manquant"
fi

if [ -f "api/news/cached.js" ]; then
    echo "   ‚úÖ api/news/cached.js existe"
else
    echo "   ‚ùå api/news/cached.js manquant"
fi

if [ -f "api/cron/refresh-news.js" ]; then
    echo "   ‚úÖ api/cron/refresh-news.js existe"
else
    echo "   ‚ùå api/cron/refresh-news.js manquant"
fi

echo ""
echo "2. Configuration Vercel:"
if [ -f "vercel.json" ]; then
    echo "   ‚úÖ vercel.json existe"
    echo "   Contenu:"
    cat vercel.json | head -20
else
    echo "   ‚ùå vercel.json manquant"
fi

echo ""
echo "3. Test des endpoints de base..."
echo ""

# Test du frontend
echo "Frontend:"
frontend_status=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/")
echo "   Status: $frontend_status"

# Test d'un endpoint qui devrait exister
echo "API Gemini (devrait exister):"
gemini_status=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/gemini/chat")
echo "   Status: $gemini_status"

# Test d'un endpoint qui n'existe pas
echo "API inexistante (test):"
fake_status=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/fake-endpoint")
echo "   Status: $fake_status"

echo ""
echo "4. V√©rification des commits r√©cents..."
echo ""
git log --oneline -5

echo ""
echo "5. V√©rification du statut Git..."
echo ""
git status --porcelain

echo ""
echo "üìä Diagnostic:"
echo "============="

if [ "$frontend_status" = "200" ]; then
    echo "‚úÖ Frontend accessible - Vercel fonctionne"
else
    echo "‚ùå Frontend non accessible - Probl√®me Vercel"
fi

if [ "$gemini_status" = "404" ]; then
    echo "‚ùå API Gemini non accessible - Probl√®me de d√©ploiement"
    echo "   Possible causes:"
    echo "   - Configuration vercel.json incorrecte"
    echo "   - Probl√®me de build Vercel"
    echo "   - Limite de fonctions Vercel atteinte"
elif [ "$gemini_status" = "405" ]; then
    echo "‚úÖ API Gemini accessible (Method Not Allowed = OK)"
else
    echo "‚ö†Ô∏è API Gemini: Status $gemini_status"
fi

echo ""
echo "üí° Solutions recommand√©es:"
echo "========================="

if [ "$gemini_status" = "404" ]; then
    echo "1. V√©rifier la configuration vercel.json"
    echo "2. V√©rifier les logs Vercel Dashboard"
    echo "3. Essayer de red√©ployer manuellement"
    echo "4. V√©rifier les limites Vercel (12 fonctions max)"
fi

echo ""
echo "üîß Commandes de test:"
echo "===================="
echo "curl -s \"$BASE_URL/api/gemini/chat\" -X POST -H \"Content-Type: application/json\" -d '{\"test\":\"test\"}'"
echo "curl -s \"$BASE_URL/api/news/cached?type=general&limit=5\""
echo "curl -s -X POST \"$BASE_URL/api/cron/refresh-news\" -H \"Authorization: Bearer YOUR_SECRET\""
