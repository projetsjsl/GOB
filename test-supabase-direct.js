#!/usr/bin/env node

/**
 * Test direct de Supabase avec les cl√©s publiques
 * Pour identifier si le probl√®me vient de RLS ou de la connexion
 */

import { createClient } from '@supabase/supabase-js';

// Cl√©s publiques (non sensibles)
const SUPABASE_URL = 'https://boyuxgdplbpkknplxbxp.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJveXV4Z2RwbGJwa2tucGx4YnhwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzkzNDc0MDAsImV4cCI6MjA1NDkyMzQwMH0.example'; // Remplacez par votre anon key

async function testDirectConnection() {
  console.log('üîç Test de connexion directe √† Supabase\n');
  
  if (SUPABASE_URL === 'https://gob-watchlist.supabase.co' || SUPABASE_ANON_KEY.includes('example')) {
    console.log('‚ùå Veuillez remplacer les valeurs par vos vraies cl√©s Supabase');
    console.log('\nüìã Instructions:');
    console.log('1. Allez dans Supabase > Settings > API');
    console.log('2. Copiez votre Project URL');
    console.log('3. Copiez votre anon key');
    console.log('4. Remplacez les valeurs dans ce script');
    return;
  }
  
  const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
  
  try {
    console.log('üîç Test 1: V√©rifier la structure de la table watchlists');
    const { data: structure, error: structureError } = await supabase
      .from('watchlists')
      .select('*')
      .limit(1);
    
    if (structureError) {
      console.log('‚ùå Erreur structure:', structureError);
      console.log(`   Code: ${structureError.code}`);
      console.log(`   Message: ${structureError.message}`);
      console.log(`   Details: ${structureError.details}`);
      console.log(`   Hint: ${structureError.hint}`);
    } else {
      console.log('‚úÖ Structure OK, exemple de donn√©es:', structure);
    }
    
    console.log('\nüîç Test 2: Lister toutes les watchlists');
    const { data: allWatchlists, error: allError } = await supabase
      .from('watchlists')
      .select('*');
    
    if (allError) {
      console.log('‚ùå Erreur liste:', allError);
      console.log(`   Code: ${allError.code}`);
      console.log(`   Message: ${allError.message}`);
    } else {
      console.log('‚úÖ Toutes les watchlists:', allWatchlists);
      console.log(`üìä Nombre total: ${allWatchlists.length}`);
    }
    
    console.log('\nüîç Test 3: Chercher watchlist "default"');
    const { data: defaultWatchlist, error: defaultError } = await supabase
      .from('watchlists')
      .select('*')
      .eq('user_id', 'default')
      .single();
    
    if (defaultError) {
      console.log('‚ùå Erreur default:', defaultError);
      console.log(`   Code: ${defaultError.code}`);
      console.log(`   Message: ${defaultError.message}`);
      
      if (defaultError.code === 'PGRST116') {
        console.log('üí° Aucune watchlist avec user_id="default" trouv√©e');
        console.log('üí° Cr√©ons une watchlist de test...');
        
        // Essayer de cr√©er une watchlist de test
        const testTickers = ['AAPL', 'GOOGL', 'MSFT'];
        const { data: insertData, error: insertError } = await supabase
          .from('watchlists')
          .insert({
            user_id: 'default',
            tickers: testTickers
          })
          .select();
        
        if (insertError) {
          console.log('‚ùå Erreur cr√©ation:', insertError);
          console.log(`   Code: ${insertError.code}`);
          console.log(`   Message: ${insertError.message}`);
          console.log(`   Details: ${insertError.details}`);
          
          if (insertError.code === '42501') {
            console.log('üí° DIAGNOSTIC: Erreur de permissions - RLS bloque l\'insertion');
            console.log('üí° SOLUTION: Utilisez la service role key ou ajustez les politiques RLS');
          }
        } else {
          console.log('‚úÖ Watchlist de test cr√©√©e:', insertData);
        }
      }
    } else {
      console.log('‚úÖ Watchlist default trouv√©e:', defaultWatchlist);
    }
    
  } catch (error) {
    console.log('‚ùå Erreur g√©n√©rale:', error);
    console.log(`   Type: ${error.constructor.name}`);
    console.log(`   Message: ${error.message}`);
  }
}

async function testWithServiceRole() {
  console.log('\nüîë Test avec Service Role Key (si disponible)\n');
  
  const SUPABASE_SERVICE_ROLE_KEY = 'sb_secret_dm4dL2YBfo9DWxkkhmLfhQ_Ijo3GCRc';
  
  if (!SUPABASE_SERVICE_ROLE_KEY) {
    console.log('‚ùå Service Role Key non fournie');
    return;
  }
  
  const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);
  
  try {
    console.log('üîç Test avec Service Role Key:');
    const { data, error } = await supabase
      .from('watchlists')
      .select('*')
      .eq('user_id', 'default')
      .single();
    
    if (error) {
      console.log('‚ùå Erreur avec Service Role Key:', error);
    } else {
      console.log('‚úÖ Succ√®s avec Service Role Key:', data);
    }
    
  } catch (err) {
    console.log('‚ùå Erreur g√©n√©rale avec Service Role Key:', err);
  }
}

async function main() {
  console.log('üîß Test direct de Supabase\n');
  
  await testDirectConnection();
  await testWithServiceRole();
  
  console.log('\nüìã DIAGNOSTIC:');
  console.log('==============');
  console.log('1. Si l\'anon key √©choue avec PGRST116: Table vide');
  console.log('2. Si l\'anon key √©choue avec 42501: Probl√®me RLS');
  console.log('3. Si la service role key fonctionne: Confirme le probl√®me RLS');
  console.log('4. Si les deux √©chouent: Probl√®me de structure ou connexion');
}

main().catch(console.error);
