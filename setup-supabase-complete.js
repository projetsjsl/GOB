/**
 * Script de Configuration Compl√®te Supabase
 * Automatise la cr√©ation du projet et la configuration des tables
 */

const setupSupabase = async () => {
  console.log('üöÄ Configuration Compl√®te Supabase pour JLab‚Ñ¢');
  console.log('===============================================');

  // √âtape 1: V√©rifier les pr√©requis
  console.log('\nüìã √âtape 1: V√©rification des pr√©requis');
  
  const requiredEnvVars = [
    'SUPABASE_URL',
    'SUPABASE_ANON_KEY'
  ];

  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.log('‚ùå Variables d\'environnement manquantes:');
    missingVars.forEach(varName => console.log(`   - ${varName}`));
    console.log('\nüîß Actions requises:');
    console.log('1. Cr√©er un projet sur https://supabase.com');
    console.log('2. R√©cup√©rer SUPABASE_URL et SUPABASE_ANON_KEY');
    console.log('3. Les ajouter dans Vercel ou .env.local');
    return false;
  }

  console.log('‚úÖ Variables d\'environnement configur√©es');

  // √âtape 2: Tester la connexion Supabase
  console.log('\nüîå √âtape 2: Test de connexion Supabase');
  
  try {
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_ANON_KEY
    );

    // Test de connexion simple
    const { data, error } = await supabase
      .from('watchlists')
      .select('count')
      .limit(1);

    if (error && error.code !== 'PGRST116') {
      throw error;
    }

    console.log('‚úÖ Connexion Supabase r√©ussie');
  } catch (error) {
    console.log('‚ùå Erreur connexion Supabase:', error.message);
    return false;
  }

  // √âtape 3: Cr√©er les tables historiques
  console.log('\nüóÑÔ∏è √âtape 3: Cr√©ation des tables historiques');
  
  try {
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_ANON_KEY
    );

    // Lire le script SQL
    const fs = await import('fs');
    const sqlScript = fs.readFileSync('supabase-historical-tables.sql', 'utf8');
    
    // Ex√©cuter le script SQL
    const { data, error } = await supabase.rpc('exec_sql', { sql: sqlScript });
    
    if (error) {
      console.log('‚ö†Ô∏è Erreur ex√©cution SQL:', error.message);
      console.log('üí° Solution: Ex√©cuter manuellement le script dans l\'√©diteur SQL Supabase');
    } else {
      console.log('‚úÖ Tables historiques cr√©√©es');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Impossible d\'ex√©cuter le script automatiquement:', error.message);
    console.log('üí° Solution: Copier-coller le contenu de supabase-historical-tables.sql dans l\'√©diteur SQL Supabase');
  }

  // √âtape 4: Tester l'API hybride
  console.log('\nüß™ √âtape 4: Test de l\'API hybride');
  
  const testCases = [
    { symbol: 'AAPL', dataType: 'quote' },
    { symbol: 'MSFT', dataType: 'profile' },
    { symbol: 'GOOGL', dataType: 'ratios' }
  ];

  for (const testCase of testCases) {
    try {
      const response = await fetch(
        `http://localhost:3000/api/hybrid-data?symbol=${testCase.symbol}&dataType=${testCase.dataType}&syncIfNeeded=true`
      );
      
      if (response.ok) {
        const data = await response.json();
        console.log(`‚úÖ ${testCase.symbol} (${testCase.dataType}): ${data.source}`);
      } else {
        console.log(`‚ùå ${testCase.symbol} (${testCase.dataType}): ${response.status}`);
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è ${testCase.symbol} (${testCase.dataType}): ${error.message}`);
    }
  }

  // √âtape 5: Validation finale
  console.log('\nüéØ √âtape 5: Validation finale');
  
  console.log('‚úÖ Configuration Supabase termin√©e !');
  console.log('\nüìä Prochaines √©tapes:');
  console.log('1. V√©rifier les tables dans Supabase Dashboard');
  console.log('2. Tester le dashboard JLab‚Ñ¢');
  console.log('3. V√©rifier l\'affichage des donn√©es dans tous les onglets');
  
  return true;
};

// Exporter pour utilisation
if (typeof module !== 'undefined' && module.exports) {
  module.exports = setupSupabase;
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  setupSupabase().catch(console.error);
}
