#!/usr/bin/env node

/**
 * Script de configuration automatique Supabase pour GOB
 * Mot de passe PostgreSQL: 5mUaqujMflrgZyCo
 */

import fs from 'fs';
import path from 'path';

const SUPABASE_PASSWORD = '5mUaqujMflrgZyCo';

console.log('üéØ CONFIGURATION AUTOMATIQUE SUPABASE GOB');
console.log('‚ïê'.repeat(60));
console.log(`üîë Mot de passe PostgreSQL: ${SUPABASE_PASSWORD}`);
console.log('');

// Cr√©er le fichier de configuration Supabase
const supabaseConfig = `// Configuration Supabase pour GOB
export const SUPABASE_CONFIG = {
    url: process.env.SUPABASE_URL || 'https://gob-watchlist.supabase.co',
    anonKey: process.env.SUPABASE_ANON_KEY,
    serviceRoleKey: process.env.SUPABASE_SERVICE_ROLE_KEY,
    dbPassword: '${SUPABASE_PASSWORD}',
    
    // Tables principales
    tables: {
        earnings_calendar: 'earnings_calendar',
        pre_earnings_analysis: 'pre_earnings_analysis',
        earnings_results: 'earnings_results',
        significant_news: 'significant_news',
        watchlist: 'watchlist'
    },
    
    // Vues utiles
    views: {
        upcoming_earnings: 'upcoming_earnings',
        critical_news_pending: 'critical_news_pending',
        earnings_performance_summary: 'earnings_performance_summary'
    }
};

// Fonction de connexion Supabase
export function createSupabaseClient(useServiceRole = false) {
    const { createClient } = require('@supabase/supabase-js');
    
    const key = useServiceRole 
        ? SUPABASE_CONFIG.serviceRoleKey 
        : SUPABASE_CONFIG.anonKey;
        
    if (!key) {
        throw new Error('Cl√© Supabase manquante. Configurez SUPABASE_ANON_KEY ou SUPABASE_SERVICE_ROLE_KEY');
    }
    
    return createClient(SUPABASE_CONFIG.url, key);
}

// Fonction de connexion PostgreSQL directe
export function createPostgresClient() {
    const { Client } = require('pg');
    
    return new Client({
        host: 'db.gob-watchlist.supabase.co',
        port: 5432,
        database: 'postgres',
        user: 'postgres',
        password: SUPABASE_CONFIG.dbPassword,
        ssl: { rejectUnauthorized: false }
    });
}
`;

// Cr√©er le fichier de configuration
fs.writeFileSync('lib/supabase-config.js', supabaseConfig);

// Cr√©er le fichier .env.example
const envExample = `# Configuration Supabase pour GOB
# R√©cup√©rer ces valeurs depuis https://app.supabase.com

# URL du projet Supabase
SUPABASE_URL=https://gob-watchlist.supabase.co

# Cl√© publique anonyme (Settings > API)
SUPABASE_ANON_KEY=eyJ...

# Cl√© secr√®te service role (Settings > API)
SUPABASE_SERVICE_ROLE_KEY=eyJ...

# Mot de passe PostgreSQL (d√©j√† fourni)
SUPABASE_DB_PASSWORD=${SUPABASE_PASSWORD}

# Instructions:
# 1. Copiez ce fichier vers .env.local
# 2. Remplissez les valeurs depuis Supabase
# 3. Testez avec: node test-supabase-gob-watchlist.js
`;

fs.writeFileSync('.env.example', envExample);

// Cr√©er le script de test complet
const testScript = `#!/usr/bin/env node

/**
 * Test complet de la configuration Supabase
 */

import { createSupabaseClient, createPostgresClient } from './lib/supabase-config.js';

async function testSupabaseAPI() {
    console.log('üß™ Test API Supabase...');
    
    try {
        const supabase = createSupabaseClient();
        
        // Test de connexion
    const { data, error } = await supabase
            .from('watchlist')
            .select('*')
      .limit(1);

        if (error) {
            console.log('‚ùå Erreur API:', error.message);
    return false;
  }

        console.log('‚úÖ API Supabase fonctionnelle');
        console.log('üìä Watchlist:', data?.length || 0, 'enregistrements');
        return true;
        
    } catch (err) {
        console.log('‚ùå Erreur:', err.message);
        return false;
    }
}

async function testPostgresDirect() {
    console.log('\\nüß™ Test PostgreSQL direct...');
    
    try {
        const client = createPostgresClient();
        await client.connect();
        
        // Tester les tables
        const result = await client.query(\`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name;
        \`);
        
        console.log('‚úÖ PostgreSQL direct fonctionnel');
        console.log('üìã Tables:', result.rows.map(r => r.table_name).join(', '));
        
        await client.end();
        return true;
        
    } catch (err) {
        console.log('‚ùå Erreur PostgreSQL:', err.message);
        return false;
    }
}

async function main() {
    console.log('üéØ TEST COMPLET SUPABASE GOB');
    console.log('‚ïê'.repeat(50));
    
    const apiOk = await testSupabaseAPI();
    const pgOk = await testPostgresDirect();
    
    console.log('\\nüìä R√âSULTATS:');
    console.log('‚ïê'.repeat(50));
    console.log('API Supabase:', apiOk ? '‚úÖ' : '‚ùå');
    console.log('PostgreSQL:', pgOk ? '‚úÖ' : '‚ùå');
    
    if (apiOk && pgOk) {
        console.log('\\nüéâ CONFIGURATION COMPL√àTE!');
        console.log('Le syst√®me Emma AI est pr√™t √† fonctionner.');
    } else {
        console.log('\\n‚ö†Ô∏è  Configuration incompl√®te.');
        console.log('V√©rifiez les variables d\\'environnement.');
    }
}

main().catch(console.error);
`;

fs.writeFileSync('test-supabase-complete.js', testScript);

// Cr√©er le script de d√©ploiement
const deployScript = `#!/usr/bin/env node

/**
 * Script de d√©ploiement Supabase pour GOB
 */

import { execSync } from 'child_process';

console.log('üöÄ D√âPLOIEMENT SUPABASE GOB');
console.log('‚ïê'.repeat(50));

console.log('üìã √âtapes de d√©ploiement:');
console.log('');

console.log('1Ô∏è‚É£  Configurer les variables Vercel:');
console.log('   vercel env add SUPABASE_URL');
console.log('   vercel env add SUPABASE_ANON_KEY');
console.log('   vercel env add SUPABASE_SERVICE_ROLE_KEY');
console.log('');

console.log('2Ô∏è‚É£  Ex√©cuter le SQL dans Supabase:');
console.log('   ‚Ä¢ Ouvrir https://app.supabase.com');
console.log('   ‚Ä¢ SQL Editor > New query');
console.log('   ‚Ä¢ Copier SUPABASE_SETUP_FINAL.sql');
console.log('   ‚Ä¢ Ex√©cuter le script');
console.log('');

console.log('3Ô∏è‚É£  Tester la configuration:');
console.log('   node test-supabase-complete.js');
console.log('');

console.log('4Ô∏è‚É£  D√©ployer sur Vercel:');
console.log('   git add .');
console.log('   git commit -m "Configuration Supabase compl√®te"');
console.log('   git push origin main');
console.log('');

console.log('5Ô∏è‚É£  V√©rifier le d√©ploiement:');
console.log('   vercel --prod');
console.log('');

console.log('‚úÖ D√©ploiement termin√©!');
console.log('Le syst√®me Emma AI est maintenant op√©rationnel.');
`;

fs.writeFileSync('deploy-supabase.js', deployScript);

console.log('üìÑ Fichiers cr√©√©s:');
console.log('   ‚úÖ lib/supabase-config.js - Configuration Supabase');
console.log('   ‚úÖ .env.example - Variables d\'environnement');
console.log('   ‚úÖ test-supabase-complete.js - Test complet');
console.log('   ‚úÖ deploy-supabase.js - Script de d√©ploiement');
console.log('');

console.log('üîß PROCHAINES √âTAPES:');
console.log('‚ïê'.repeat(50));
console.log('1. R√©cup√©rer les cl√©s depuis Supabase');
console.log('2. Configurer les variables Vercel');
console.log('3. Ex√©cuter le SQL dans Supabase');
console.log('4. Tester: node test-supabase-complete.js');
console.log('5. D√©ployer: node deploy-supabase.js');
console.log('');

console.log('üìñ Guide complet: SUPABASE_SETUP_GUIDE.md');
console.log('');

export { SUPABASE_PASSWORD };