#!/bin/bash

# ============================================================================
# SCRIPT DE TEST COMPLET - GEMINI MODES
# ============================================================================
# Ce script teste tous les modes de Gemini pour valider le fonctionnement
# ============================================================================

echo "ü§ñ TEST COMPLET DES MODES GEMINI - Emma En Direct"
echo "=================================================="
echo ""

BASE_URL="https://gobapps.com/api/gemini"

# Test 1: Mode Simple (chat.js)
echo "1Ô∏è‚É£  Test Mode Simple (chat.js)..."
curl -s -X POST "$BASE_URL/chat" \
  -H "Content-Type: application/json" \
  -d '{"messages": [{"role": "user", "content": "Bonjour Emma, comment allez-vous ?"}]}' \
  | jq -r '"R√©ponse: \(.response[0:100])... | Longueur: \(.response | length) | Source: \(.source)"'
echo ""

# Test 2: Mode Valid√© (chat-validated.js)
echo "2Ô∏è‚É£  Test Mode Valid√© (chat-validated.js)..."
curl -s -X POST "$BASE_URL/chat-validated" \
  -H "Content-Type: application/json" \
  -d '{"messages": [{"role": "user", "content": "Bonjour Emma, comment allez-vous ?"}], "useValidatedMode": true}' \
  | jq -r '"Succ√®s: \(.success) | Mod√®le: \(.model) | R√©ponse: \(.response[0:100])... | Longueur: \(.response | length)"'
echo ""

# Test 3: Test Function Calling (si activ√©)
echo "3Ô∏è‚É£  Test Function Calling (chat.js)..."
curl -s -X POST "$BASE_URL/chat" \
  -H "Content-Type: application/json" \
  -d '{"messages": [{"role": "user", "content": "Peux-tu me donner le prix de AAPL ?"}]}' \
  | jq -r '"Fonctions ex√©cut√©es: \(.functionsExecuted | length) | R√©ponse: \(.response[0:100])..."'
echo ""

# Test 4: Test avec message complexe
echo "4Ô∏è‚É£  Test Message Complexe (Mode Valid√©)..."
curl -s -X POST "$BASE_URL/chat-validated" \
  -H "Content-Type: application/json" \
  -d '{"messages": [{"role": "user", "content": "Analysez le march√© actuel et donnez-moi votre perspective sur les tendances technologiques."}], "useValidatedMode": true}' \
  | jq -r '"Succ√®s: \(.success) | Tokens: \(.usage.totalTokens) | R√©ponse: \(.response[0:150])..."'
echo ""

# Test 5: Test de gestion d'erreur
echo "5Ô∏è‚É£  Test Gestion d'Erreur (Message vide)..."
curl -s -X POST "$BASE_URL/chat-validated" \
  -H "Content-Type: application/json" \
  -d '{"messages": [], "useValidatedMode": true}' \
  | jq -r '"Erreur: \(.error // "Aucune") | Succ√®s: \(.success)"'
echo ""

echo "‚úÖ Tests termin√©s !"
echo ""
echo "üìä R√âSUM√â DES MODES :"
echo "- Mode Simple : Chat basique avec fallback"
echo "- Mode Valid√© : Validation avanc√©e + m√©triques"
echo "- Function Calling : D√©sactiv√© (comment√© dans le code)"
echo ""
echo "üîß ACTIONS N√âCESSAIRES :"
echo "- Si Function Calling souhait√© : D√©commenter l'import dans chat.js"
echo "- Si cl√© Gemini manquante : Ajouter GEMINI_API_KEY dans Vercel"
echo "- Si erreurs 401 : V√©rifier la validit√© de la cl√© API"
