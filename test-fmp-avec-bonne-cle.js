/**
 * Test FMP avec la Bonne Cl√© API
 * Teste l'API FMP avec la cl√© fournie par l'utilisateur
 */

const testFmpAvecBonneCle = async () => {
  console.log('üîë TEST FMP AVEC LA BONNE CL√â API');
  console.log('==================================');
  console.log('');

  const FMP_API_KEY = 'Yo1RJiZ6G5JLEMmTzhGpusq78aIWhiyt';

  // Test 1: V√©rifier que la cl√© fonctionne
  console.log('üìã √âTAPE 1: V√©rification de la Cl√© API');
  console.log('-------------------------------------');
  
  try {
    const response = await fetch(`https://financialmodelingprep.com/stable/profile?symbol=AAPL&apikey=${FMP_API_KEY}`);
    const data = await response.json();
    
    if (response.ok && data.length > 0) {
      console.log('‚úÖ Cl√© API FMP fonctionnelle !');
      console.log('Donn√©es re√ßues:', data.length, '√©l√©ments');
      console.log('Exemple de donn√©es:', JSON.stringify(data[0], null, 2));
    } else {
      console.log('‚ùå Cl√© API FMP non fonctionnelle');
      console.log('Status:', response.status);
      console.log('R√©ponse:', JSON.stringify(data, null, 2));
    }
  } catch (error) {
    console.log('‚ùå Erreur:', error.message);
  }
  console.log('');

  // Test 2: Tester diff√©rents endpoints
  console.log('üîå √âTAPE 2: Test des Endpoints FMP');
  console.log('----------------------------------');
  
  const endpoints = [
    { name: 'Profile', url: `https://financialmodelingprep.com/stable/profile?symbol=AAPL&apikey=${FMP_API_KEY}` },
    { name: 'Quote', url: `https://financialmodelingprep.com/stable/quote/AAPL?apikey=${FMP_API_KEY}` },
    { name: 'Historical Chart', url: `https://financialmodelingprep.com/stable/historical-chart/1day/AAPL?apikey=${FMP_API_KEY}` }
  ];

  for (const endpoint of endpoints) {
    try {
      console.log(`  üîÑ Test ${endpoint.name}...`);
      const response = await fetch(endpoint.url);
      const data = await response.json();
      
      if (response.ok) {
        if (data.length > 0) {
          console.log(`    ‚úÖ ${endpoint.name}: Fonctionnel (${data.length} √©l√©ments)`);
        } else {
          console.log(`    ‚ö†Ô∏è ${endpoint.name}: Fonctionnel mais vide`);
        }
      } else {
        console.log(`    ‚ùå ${endpoint.name}: Erreur ${response.status}`);
      }
    } catch (error) {
      console.log(`    ‚ùå ${endpoint.name}: ${error.message}`);
    }
  }
  console.log('');

  // Test 3: Recommandations
  console.log('üéØ √âTAPE 3: Recommandations');
  console.log('---------------------------');
  
  console.log('üîß POUR R√âSOUDRE LE PROBL√àME:');
  console.log('');
  console.log('1. METTRE √Ä JOUR LA CL√â API DANS VERCEL:');
  console.log('   - Aller sur https://vercel.com/dashboard');
  console.log('   - S√©lectionner le projet GOB');
  console.log('   - Settings ‚Üí Environment Variables');
  console.log('   - Modifier FMP_API_KEY avec: Yo1RJiZ6G5JLEMmTzhGpusq78aIWhiyt');
  console.log('   - Red√©ployer le projet');
  console.log('');
  console.log('2. V√âRIFIER QUE LA CORRECTION FONCTIONNE:');
  console.log('   - L\'endpoint /quote/AAPL retourne un tableau vide');
  console.log('   - L\'endpoint /profile?symbol=AAPL retourne des donn√©es compl√®tes');
  console.log('   - Notre code utilise maintenant /profile pour getQuote()');
  console.log('');
  console.log('3. TESTER APR√àS RED√âPLOIEMENT:');
  console.log('   - curl "https://gobapps.com/api/unified-serverless?endpoint=fmp&symbol=AAPL&action=quote"');
  console.log('   - V√©rifier que les donn√©es s\'affichent correctement');
  console.log('');

  console.log('üìä R√âSUM√â:');
  console.log('==========');
  console.log('‚úÖ Cl√© API FMP fonctionnelle');
  console.log('‚úÖ Endpoint /profile fonctionnel');
  console.log('‚úÖ Code corrig√© pour utiliser /profile');
  console.log('‚ùå Cl√© API dans Vercel √† mettre √† jour');
  console.log('');
  console.log('üéâ Une fois la cl√© mise √† jour dans Vercel, le syst√®me sera fonctionnel !');
};

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  testFmpAvecBonneCle().catch(console.error);
}

export { testFmpAvecBonneCle };
