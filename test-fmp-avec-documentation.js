/**
 * Test FMP avec Documentation Officielle
 * Teste l'API FMP en utilisant la documentation officielle
 */

const testFmpAvecDocumentation = async () => {
  console.log('üîë TEST FMP AVEC DOCUMENTATION OFFICIELLE');
  console.log('==========================================');
  console.log('');

  // Test 1: V√©rifier la variable d'environnement
  console.log('üìã √âTAPE 1: V√©rification de la Variable d\'Environnement');
  console.log('-------------------------------------------------------');
  
  const FMP_API_KEY = process.env.FMP_API_KEY;
  console.log('FMP_API_KEY:', FMP_API_KEY ? '‚úÖ Configur√©e' : '‚ùå Manquante');
  
  if (FMP_API_KEY) {
    console.log('Longueur de la cl√©:', FMP_API_KEY.length);
    console.log('D√©but de la cl√©:', FMP_API_KEY.substring(0, 8) + '...');
  } else {
    console.log('‚ùå Impossible de tester - cl√© API manquante');
    console.log('üìñ Guide: Ajouter FMP_API_KEY dans Vercel Environment Variables');
    return;
  }
  console.log('');

  // Test 2: Test avec l'endpoint Quote (selon la documentation)
  console.log('üîå √âTAPE 2: Test Endpoint Quote (Documentation Officielle)');
  console.log('----------------------------------------------------------');
  
  try {
    const quoteUrl = `https://financialmodelingprep.com/stable/quote/AAPL?apikey=${FMP_API_KEY}`;
    console.log('URL de test:', quoteUrl.replace(FMP_API_KEY, '***'));
    
    const response = await fetch(quoteUrl);
    const data = await response.json();
    
    console.log('Status HTTP:', response.status);
    console.log('Headers:', Object.fromEntries(response.headers.entries()));
    
    if (response.ok) {
      console.log('‚úÖ API FMP Quote fonctionnelle !');
      console.log('Donn√©es re√ßues:', data.length > 0 ? `${data.length} √©l√©ments` : 'Aucune donn√©e');
      if (data.length > 0) {
        console.log('Exemple de donn√©es:', JSON.stringify(data[0], null, 2));
      }
    } else {
      console.log('‚ùå Erreur API FMP Quote:', response.status);
      console.log('R√©ponse:', JSON.stringify(data, null, 2));
      
      if (response.status === 403) {
        console.log('');
        console.log('üö® ERREUR 403 - CAUSES POSSIBLES:');
        console.log('1. Cl√© API incorrecte ou expir√©e');
        console.log('2. Compte FMP inactif ou suspendu');
        console.log('3. Limite de requ√™tes d√©pass√©e');
        console.log('4. Plan gratuit √©puis√©');
        console.log('');
        console.log('üîß SOLUTIONS:');
        console.log('1. V√©rifier la cl√© sur https://financialmodelingprep.com');
        console.log('2. V√©rifier le statut du compte');
        console.log('3. Consid√©rer un plan payant si n√©cessaire');
      }
    }
  } catch (error) {
    console.log('‚ùå Erreur lors du test Quote:', error.message);
  }
  console.log('');

  // Test 3: Test avec l'endpoint Profile (selon la documentation)
  console.log('üîå √âTAPE 3: Test Endpoint Profile (Documentation Officielle)');
  console.log('------------------------------------------------------------');
  
  try {
    const profileUrl = `https://financialmodelingprep.com/stable/profile?symbol=AAPL&apikey=${FMP_API_KEY}`;
    console.log('URL de test:', profileUrl.replace(FMP_API_KEY, '***'));
    
    const response = await fetch(profileUrl);
    const data = await response.json();
    
    console.log('Status HTTP:', response.status);
    
    if (response.ok) {
      console.log('‚úÖ API FMP Profile fonctionnelle !');
      console.log('Donn√©es re√ßues:', data.length > 0 ? `${data.length} √©l√©ments` : 'Aucune donn√©e');
      if (data.length > 0) {
        console.log('Exemple de donn√©es:', JSON.stringify(data[0], null, 2));
      }
    } else {
      console.log('‚ùå Erreur API FMP Profile:', response.status);
      console.log('R√©ponse:', JSON.stringify(data, null, 2));
    }
  } catch (error) {
    console.log('‚ùå Erreur lors du test Profile:', error.message);
  }
  console.log('');

  // Test 4: Test avec l'endpoint Historical Chart (selon la documentation)
  console.log('üîå √âTAPE 4: Test Endpoint Historical Chart (Documentation Officielle)');
  console.log('--------------------------------------------------------------------');
  
  try {
    const chartUrl = `https://financialmodelingprep.com/stable/historical-chart/1day/AAPL?apikey=${FMP_API_KEY}`;
    console.log('URL de test:', chartUrl.replace(FMP_API_KEY, '***'));
    
    const response = await fetch(chartUrl);
    const data = await response.json();
    
    console.log('Status HTTP:', response.status);
    
    if (response.ok) {
      console.log('‚úÖ API FMP Historical Chart fonctionnelle !');
      console.log('Donn√©es re√ßues:', data.length > 0 ? `${data.length} √©l√©ments` : 'Aucune donn√©e');
      if (data.length > 0) {
        console.log('Exemple de donn√©es:', JSON.stringify(data[0], null, 2));
      }
    } else {
      console.log('‚ùå Erreur API FMP Historical Chart:', response.status);
      console.log('R√©ponse:', JSON.stringify(data, null, 2));
    }
  } catch (error) {
    console.log('‚ùå Erreur lors du test Historical Chart:', error.message);
  }
  console.log('');

  // Test 5: Test avec notre API unifi√©e
  console.log('üîå √âTAPE 5: Test de Notre API Unifi√©e');
  console.log('-------------------------------------');
  
  try {
    const ourApiUrl = 'https://gobapps.com/api/unified-serverless?endpoint=fmp&symbol=AAPL&action=quote';
    console.log('URL de test:', ourApiUrl);
    
    const response = await fetch(ourApiUrl);
    const data = await response.json();
    
    console.log('Status HTTP:', response.status);
    console.log('R√©ponse:', JSON.stringify(data, null, 2));
    
    if (response.ok && !data.error) {
      console.log('‚úÖ Notre API unifi√©e fonctionnelle !');
    } else {
      console.log('‚ùå Notre API unifi√©e √©chou√©e');
      console.log('üîß V√©rifier la configuration dans api/unified-serverless.js');
    }
  } catch (error) {
    console.log('‚ùå Erreur lors du test de notre API:', error.message);
  }
  console.log('');

  // R√©sum√© et recommandations
  console.log('üéØ R√âSUM√â ET RECOMMANDATIONS');
  console.log('============================');
  console.log('');
  console.log('üìñ DOCUMENTATION FMP:');
  console.log('- Base URL: https://financialmodelingprep.com/stable/');
  console.log('- Format API Key: ?apikey=YOUR_API_KEY');
  console.log('- Endpoints disponibles: quote, profile, historical-chart, etc.');
  console.log('');
  console.log('üîß ACTIONS REQUISES:');
  console.log('1. V√©rifier que la cl√© API FMP est correcte');
  console.log('2. Tester la cl√© directement sur le site FMP');
  console.log('3. V√©rifier le statut du compte FMP');
  console.log('4. Mettre √† jour la cl√© dans Vercel si n√©cessaire');
  console.log('5. Red√©ployer le projet apr√®s modification');
  console.log('');
  console.log('üåê LIENS UTILES:');
  console.log('- Documentation: https://site.financialmodelingprep.com/developer/docs');
  console.log('- Dashboard: https://financialmodelingprep.com');
  console.log('- Test direct: https://financialmodelingprep.com/stable/quote/AAPL?apikey=VOTRE_CLE');
};

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  testFmpAvecDocumentation().catch(console.error);
}

export { testFmpAvecDocumentation };
