// Script de test de connexion Finnhub
// Ex√©cuter avec: node test-finnhub-connection.js

const FINNHUB_API_KEY = process.env.FINNHUB_API_KEY;

console.log('üîç Test de connexion √† l\'API Finnhub\n');
console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

// V√©rifier si la cl√© API est configur√©e
if (!FINNHUB_API_KEY) {
    console.log('‚ùå ERREUR: Variable d\'environnement FINNHUB_API_KEY non configur√©e');
    console.log('\nüìù Pour configurer:');
    console.log('   1. Obtenez une cl√© API gratuite sur https://finnhub.io/');
    console.log('   2. Ajoutez la variable dans Vercel:');
    console.log('      Dashboard ‚Üí Settings ‚Üí Environment Variables');
    console.log('      Name: FINNHUB_API_KEY');
    console.log('      Value: votre_cl√©_api\n');
    process.exit(1);
}

console.log(`‚úÖ Cl√© API configur√©e: ${FINNHUB_API_KEY.substring(0, 10)}...`);
console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

// Fonction pour tester un symbole
async function testSymbol(symbol, description) {
    try {
        const url = `https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${FINNHUB_API_KEY}`;
        
        console.log(`üìä Test ${description} (${symbol})...`);
        
        const response = await fetch(url);
        const data = await response.json();
        
        if (data.error) {
            console.log(`   ‚ùå ERREUR: ${data.error}`);
            return false;
        } else if (data.c && data.c > 0) {
            console.log(`   ‚úÖ SUCC√àS`);
            console.log(`      Prix: $${data.c}`);
            console.log(`      Change: ${data.d > 0 ? '+' : ''}${data.d} (${data.dp > 0 ? '+' : ''}${data.dp}%)`);
            console.log(`      High: $${data.h} | Low: $${data.l}`);
            return true;
        } else {
            console.log(`   ‚ö†Ô∏è R√©ponse invalide:`, data);
            return false;
        }
    } catch (error) {
        console.log(`   ‚ùå Exception: ${error.message}`);
        return false;
    }
}

// Tester diff√©rents types de symboles
async function runTests() {
    console.log('üß™ Tests de diff√©rents symboles:\n');
    
    const tests = [
        // Actions r√©guli√®res (devrait fonctionner)
        { symbol: 'AAPL', description: 'Apple Inc' },
        { symbol: 'MSFT', description: 'Microsoft Corp' },
        
        // Indices (peut ne pas fonctionner avec Finnhub gratuit)
        { symbol: '^GSPC', description: 'S&P 500 Index' },
        { symbol: '^IXIC', description: 'NASDAQ Composite' },
        { symbol: '^DJI', description: 'Dow Jones Industrial Average' },
        
        // Forex (peut n√©cessiter un plan payant)
        { symbol: 'OANDA:EUR_USD', description: 'EUR/USD Forex' },
        
        // Crypto (devrait fonctionner)
        { symbol: 'BINANCE:BTCUSDT', description: 'Bitcoin/USDT' }
    ];
    
    const results = [];
    
    for (const test of tests) {
        const success = await testSymbol(test.symbol, test.description);
        results.push({ ...test, success });
        console.log('');
        
        // Pause pour √©viter les limites de taux
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
    console.log('üìà R√©sum√© des tests:\n');
    
    const successCount = results.filter(r => r.success).length;
    const totalCount = results.length;
    
    results.forEach(r => {
        const status = r.success ? '‚úÖ' : '‚ùå';
        console.log(`   ${status} ${r.description} (${r.symbol})`);
    });
    
    console.log(`\nüìä ${successCount}/${totalCount} tests r√©ussis`);
    
    if (successCount === 0) {
        console.log('\n‚ùå AUCUN test n\'a r√©ussi!');
        console.log('   Possibles raisons:');
        console.log('   1. Cl√© API invalide ou expir√©e');
        console.log('   2. Limite de taux atteinte');
        console.log('   3. Plan gratuit avec acc√®s limit√© aux symboles');
        console.log('\nüí° Recommandation:');
        console.log('   - V√©rifiez votre cl√© API sur https://finnhub.io/dashboard');
        console.log('   - Consultez la documentation: https://finnhub.io/docs/api/quote');
    } else if (successCount < totalCount) {
        console.log('\n‚ö†Ô∏è Certains tests ont √©chou√©');
        console.log('   Note: Le plan gratuit de Finnhub peut avoir des limitations');
        console.log('   sur les indices, forex et certains symboles sp√©ciaux.');
        console.log('\nüí° Solutions:');
        console.log('   1. Utiliser des ETF au lieu d\'indices (SPY au lieu de ^GSPC)');
        console.log('   2. Utiliser Alpha Vantage pour les indices');
        console.log('   3. Passer √† un plan payant Finnhub');
    } else {
        console.log('\n‚úÖ TOUS les tests ont r√©ussi!');
        console.log('   Finnhub est correctement configur√© et fonctionnel.');
    }
    
    console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
}

// Ex√©cuter les tests
runTests().catch(error => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
});

