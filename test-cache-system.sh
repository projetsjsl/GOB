#!/bin/bash

# Script de test pour le syst√®me de cache des nouvelles
echo "üß™ Test du syst√®me de cache des nouvelles"
echo "=========================================="
echo ""

# Configuration
BASE_URL="https://gob.vercel.app"
CRON_SECRET="0S0WkQvmLDYpkxDFrE1N7Q5JHl15bwCfb9g/Tpf19gA="

echo "üîç Test 1: V√©rification de l'API de cache (nouvelles g√©n√©rales)"
echo "URL: $BASE_URL/api/news/cached?type=general&limit=5"
echo ""

response1=$(curl -s -w "\n%{http_code}" "$BASE_URL/api/news/cached?type=general&limit=5")
http_code1=$(echo "$response1" | tail -n1)
body1=$(echo "$response1" | head -n -1)

echo "Status HTTP: $http_code1"
if [ "$http_code1" = "200" ]; then
    echo "‚úÖ API de cache accessible"
    echo "R√©ponse:"
    echo "$body1" | jq '.' 2>/dev/null || echo "$body1"
else
    echo "‚ùå Erreur API de cache: $http_code1"
    echo "R√©ponse: $body1"
fi

echo ""
echo "üîç Test 2: V√©rification de l'API de cache (nouvelles par symbole)"
echo "URL: $BASE_URL/api/news/cached?type=symbol&symbol=AAPL&limit=5"
echo ""

response2=$(curl -s -w "\n%{http_code}" "$BASE_URL/api/news/cached?type=symbol&symbol=AAPL&limit=5")
http_code2=$(echo "$response2" | tail -n1)
body2=$(echo "$response2" | head -n -1)

echo "Status HTTP: $http_code2"
if [ "$http_code2" = "200" ]; then
    echo "‚úÖ API de cache symbol accessible"
    echo "R√©ponse:"
    echo "$body2" | jq '.' 2>/dev/null || echo "$body2"
else
    echo "‚ùå Erreur API de cache symbol: $http_code2"
    echo "R√©ponse: $body2"
fi

echo ""
echo "üîç Test 3: Test du cron job (refresh des nouvelles)"
echo "URL: $BASE_URL/api/cron/refresh-news"
echo ""

response3=$(curl -s -w "\n%{http_code}" -X POST "$BASE_URL/api/cron/refresh-news" \
  -H "Authorization: Bearer $CRON_SECRET")
http_code3=$(echo "$response3" | tail -n1)
body3=$(echo "$response3" | head -n -1)

echo "Status HTTP: $http_code3"
if [ "$http_code3" = "200" ]; then
    echo "‚úÖ Cron job fonctionnel"
    echo "R√©ponse:"
    echo "$body3" | jq '.' 2>/dev/null || echo "$body3"
elif [ "$http_code3" = "401" ]; then
    echo "‚ö†Ô∏è Cron job accessible mais CRON_SECRET non configur√©"
    echo "Configurez la variable d'environnement CRON_SECRET dans Vercel"
else
    echo "‚ùå Erreur cron job: $http_code3"
    echo "R√©ponse: $body3"
fi

echo ""
echo "üîç Test 4: V√©rification du frontend"
echo "URL: $BASE_URL/"
echo ""

response4=$(curl -s -w "\n%{http_code}" "$BASE_URL/")
http_code4=$(echo "$response4" | tail -n1)

echo "Status HTTP: $http_code4"
if [ "$http_code4" = "200" ]; then
    echo "‚úÖ Frontend accessible"
else
    echo "‚ùå Erreur frontend: $http_code4"
fi

echo ""
echo "üìä R√©sum√© des tests:"
echo "==================="
echo "API Cache G√©n√©ral: $([ "$http_code1" = "200" ] && echo "‚úÖ OK" || echo "‚ùå ERREUR")"
echo "API Cache Symbol:  $([ "$http_code2" = "200" ] && echo "‚úÖ OK" || echo "‚ùå ERREUR")"
echo "Cron Job:          $([ "$http_code3" = "200" ] && echo "‚úÖ OK" || echo "‚ùå ERREUR")"
echo "Frontend:          $([ "$http_code4" = "200" ] && echo "‚úÖ OK" || echo "‚ùå ERREUR")"

echo ""
echo "üí° Prochaines √©tapes:"
echo "1. Si des erreurs 404: Attendre le d√©ploiement Vercel (2-3 minutes)"
echo "2. Si erreur 401 sur cron: Configurer CRON_SECRET dans Vercel"
echo "3. Si erreurs 500: V√©rifier les variables d'environnement Supabase"
echo "4. Ex√©cuter le script SQL dans Supabase Dashboard"
