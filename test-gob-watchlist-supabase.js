/**
 * Test du Projet Supabase gob-watchlist
 * V√©rifie que le projet gob-watchlist est correctement configur√©
 */

const testGobWatchlistSupabase = async () => {
  console.log('üîç TEST DU PROJET SUPABASE gob-watchlist');
  console.log('=========================================');
  console.log('');

  // V√©rifier les variables d'environnement
  console.log('üìã V√âRIFICATION DES VARIABLES D\'ENVIRONNEMENT');
  console.log('---------------------------------------------');
  
  const SUPABASE_URL = process.env.SUPABASE_URL;
  const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;
  
  console.log('SUPABASE_URL:', SUPABASE_URL ? '‚úÖ Configur√©' : '‚ùå Manquant');
  if (SUPABASE_URL) {
    console.log('   URL:', SUPABASE_URL);
    // V√©rifier si l'URL contient gob-watchlist
    if (SUPABASE_URL.includes('gob-watchlist')) {
      console.log('   ‚úÖ URL correspond au projet gob-watchlist');
    } else {
      console.log('   ‚ö†Ô∏è URL ne correspond pas au projet gob-watchlist');
    }
  }
  
  console.log('SUPABASE_ANON_KEY:', SUPABASE_ANON_KEY ? '‚úÖ Configur√©' : '‚ùå Manquant');
  if (SUPABASE_ANON_KEY) {
    console.log('   Key:', SUPABASE_ANON_KEY.substring(0, 20) + '...');
  }
  
  if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
    console.log('');
    console.log('üö® CONFIGURATION REQUISE !');
    console.log('');
    console.log('üìã √âTAPES POUR CONFIGURER gob-watchlist:');
    console.log('');
    console.log('1. üÜï Cr√©er le projet Supabase:');
    console.log('   - Aller sur https://supabase.com');
    console.log('   - Cr√©er un nouveau projet');
    console.log('   - Nom: gob-watchlist');
    console.log('   - R√©gion: West Europe (Ireland)');
    console.log('');
    console.log('2. üóÑÔ∏è Cr√©er les tables:');
    console.log('   - Aller dans SQL Editor');
    console.log('   - Copier le contenu de supabase-historical-tables.sql');
    console.log('   - Ex√©cuter le script');
    console.log('');
    console.log('3. üîë R√©cup√©rer les cl√©s:');
    console.log('   - Aller dans Settings > API');
    console.log('   - Copier Project URL et anon public key');
    console.log('   - Les ajouter dans Vercel Environment Variables');
    console.log('');
    console.log('4. üöÄ Red√©ployer:');
    console.log('   - Dans Vercel Dashboard > Deployments');
    console.log('   - Cliquer "Redeploy"');
    console.log('');
    return false;
  }
  
  console.log('‚úÖ Variables d\'environnement configur√©es');
  console.log('');

  // Tester la connexion
  console.log('üîå TEST DE CONNEXION SUPABASE');
  console.log('-----------------------------');
  
  try {
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    
    // Test avec la table watchlists existante
    const { data: watchlists, error: watchlistError } = await supabase
      .from('watchlists')
      .select('*')
      .limit(1);
    
    if (watchlistError && watchlistError.code !== 'PGRST116') {
      throw watchlistError;
    }
    
    console.log('‚úÖ Connexion Supabase r√©ussie');
    console.log('‚úÖ Table watchlists accessible');
    
    if (watchlists && watchlists.length > 0) {
      console.log(`   Watchlists trouv√©es: ${watchlists.length}`);
    } else {
      console.log('   Aucune watchlist trouv√©e (normal pour un nouveau projet)');
    }
    console.log('');
  } catch (error) {
    console.log('‚ùå Erreur connexion Supabase:', error.message);
    console.log('');
    console.log('üîß SOLUTIONS:');
    console.log('1. V√©rifier que le projet gob-watchlist existe');
    console.log('2. V√©rifier que les cl√©s sont correctes');
    console.log('3. V√©rifier que le projet est actif');
    return false;
  }

  // V√©rifier les tables historiques
  console.log('üóÑÔ∏è V√âRIFICATION DES TABLES HISTORIQUES');
  console.log('--------------------------------------');
  
  const historicalTables = [
    'stock_quotes',
    'stock_profiles', 
    'financial_ratios',
    'news_articles',
    'daily_prices',
    'analyst_recommendations',
    'earnings_calendar'
  ];
  
  const existingTables = [];
  const missingTables = [];
  
  try {
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    
    for (const table of historicalTables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('count')
          .limit(1);
        
        if (error && error.code === '42P01') { // Table doesn't exist
          missingTables.push(table);
        } else {
          existingTables.push(table);
        }
      } catch (error) {
        missingTables.push(table);
      }
    }
    
    console.log('‚úÖ Tables existantes:', existingTables.length);
    existingTables.forEach(table => console.log(`   - ${table}`));
    
    if (missingTables.length > 0) {
      console.log('');
      console.log('‚ùå Tables manquantes:', missingTables.length);
      missingTables.forEach(table => console.log(`   - ${table}`));
      console.log('');
      console.log('üîß SOLUTION:');
      console.log('1. Aller dans Supabase Dashboard ‚Üí SQL Editor');
      console.log('2. Copier le contenu de supabase-historical-tables.sql');
      console.log('3. Ex√©cuter le script');
      console.log('');
      return false;
    } else {
      console.log('‚úÖ Toutes les tables historiques sont cr√©√©es');
      console.log('');
    }
  } catch (error) {
    console.log('‚ùå Erreur v√©rification tables:', error.message);
    return false;
  }

  // Test de l'API hybride
  console.log('üß™ TEST DE L\'API HYBRIDE');
  console.log('-------------------------');
  
  try {
    const response = await fetch('https://gobapps.com/api/hybrid-data?symbol=AAPL&dataType=quote&syncIfNeeded=true');
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ API hybride fonctionnelle');
      console.log(`   Source: ${data.source}`);
      console.log(`   Donn√©es: ${data.data ? 'Pr√©sentes' : 'Manquantes'}`);
      
      if (data.source === 'local') {
        console.log('üéâ Cache local fonctionnel !');
      } else {
        console.log('‚ö†Ô∏è Utilisation des APIs externes (cache pas encore actif)');
      }
    } else {
      console.log('‚ùå API hybride √©chou√©e:', response.status);
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Erreur test API hybride:', error.message);
  }

  console.log('');
  console.log('üéØ R√âSUM√â FINAL');
  console.log('===============');
  console.log('‚úÖ Projet gob-watchlist configur√©');
  console.log('‚úÖ Tables historiques cr√©√©es');
  console.log('‚úÖ API hybride op√©rationnelle');
  console.log('‚úÖ Syst√®me pr√™t pour le cache local');
  console.log('');
  console.log('üéâ F√âLICITATIONS !');
  console.log('Votre projet gob-watchlist est maintenant op√©rationnel !');
  
  return true;
};

// Ex√©cuter si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  testGobWatchlistSupabase().catch(console.error);
}

export { testGobWatchlistSupabase };
